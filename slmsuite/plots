import numpy as np
import matplotlib.pyplot as plt

def gaussian_phase_1d(x, x0, sigma, amplitude):
    return amplitude * np.exp(-((x - x0)**2) / (2 * sigma**2))

def initial_phase_pattern_1d(length, points):
    x = np.arange(length)
    phase = np.zeros(length, dtype=np.complex128)
    for point in points:
        x0 = point
        phase += np.exp(1j * x * x0)
    return np.angle(phase)

def compute_intensity_1d(phase):
    return np.abs(np.fft.ifftshift(np.fft.ifft(np.fft.fftshift(np.exp(1j * phase)))))**2

# Parameters
length = 256
sigma = 200
amplitude = 15
points = [64, 128, 192]  # Example point locations

# Create 1D grid
x = np.arange(length)

# Initial phase pattern
initial_phase = initial_phase_pattern_1d(length, points)

# Gaussian phase
gaussian_phase_profile = gaussian_phase_1d(x, length//2, sigma, amplitude)

# Modified phase pattern
modified_phase = initial_phase + gaussian_phase_profile

# Compute intensities
initial_intensity = compute_intensity_1d(initial_phase)
modified_intensity = compute_intensity_1d(modified_phase)

# Plotting
plt.figure(figsize=(12, 6))

plt.subplot(2, 2, 1)
plt.title("Initial Phase")
plt.plot(x, initial_phase, 'k')
plt.grid(True)

plt.subplot(2, 2, 2)
plt.title("Initial Intensity")
plt.plot(x, initial_intensity, 'r')
plt.grid(True)

plt.subplot(2, 2, 3)
plt.title("Gaussian Phase Profile")
plt.plot(x, gaussian_phase_profile, 'b')
plt.grid(True)

plt.subplot(2, 2, 4)
plt.title("Modified Intensity")
plt.plot(x, modified_intensity, 'g')
plt.grid(True)

plt.tight_layout()
plt.show()