import math
import os
import sys

import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
from scipy.optimize import curve_fit
from skimage.draw import disk

# from tabulate import tabulate
from utils import data_manager as dm
from utils import kplotlib as kpl


# Define the 2D Gaussian function
def gaussian_2d(xy, amplitude, xo, yo, sigma_x, sigma_y, theta, offset):
    x, y = xy
    xo = float(xo)
    yo = float(yo)
    a = (np.cos(theta) ** 2) / (2 * sigma_x**2) + (np.sin(theta) ** 2) / (
        2 * sigma_y**2
    )
    b = -(np.sin(2 * theta)) / (4 * sigma_x**2) + (np.sin(2 * theta)) / (4 * sigma_y**2)
    c = (np.sin(theta) ** 2) / (2 * sigma_x**2) + (np.cos(theta) ** 2) / (
        2 * sigma_y**2
    )
    g = offset + amplitude * np.exp(
        -(a * ((x - xo) ** 2) + 2 * b * (x - xo) * (y - yo) + c * ((y - yo) ** 2))
    )
    return g.ravel()


# Function to fit a 2D Gaussian around NV coordinates
def fit_gaussian(image, coord, window_size=2):
    x0, y0 = coord
    img_shape_y, img_shape_x = image.shape

    # Ensure the window is within image bounds
    x_min = max(int(x0 - window_size), 0)
    x_max = min(int(x0 + window_size + 1), img_shape_x)
    y_min = max(int(y0 - window_size), 0)
    y_max = min(int(y0 + window_size + 1), img_shape_y)

    if (x_max - x_min) <= 1 or (y_max - y_min) <= 1:
        print(
            f"Invalid cutout for NV at ({x0}, {y0}): Region too small or out of bounds"
        )
        return x0, y0

    # Extract cutout and mesh grid
    x_range = np.arange(x_min, x_max)
    y_range = np.arange(y_min, y_max)
    x, y = np.meshgrid(x_range, y_range)
    image_cutout = image[y_min:y_max, x_min:x_max]

    # Check for valid cutout size
    if image_cutout.size == 0:
        print(f"Zero-size cutout for NV at ({x0}, {y0})")
        return x0, y0

    # Normalize the image cutout
    image_cutout = (image_cutout - np.min(image_cutout)) / (
        np.max(image_cutout) - np.min(image_cutout)
    )

    # Initial guess parameters
    initial_guess = (1, x0, y0, 3, 3, 0, 0)  # Amplitude normalized to 1

    try:
        # Apply bounds to avoid unreasonable parameter values
        bounds = (
            (0, x_min, y_min, 0, 0, -np.pi, 0),  # Lower bounds
            (np.inf, x_max, y_max, np.inf, np.inf, np.pi, np.inf),  # Upper bounds
        )

        # Perform the Gaussian fit
        popt, _ = curve_fit(
            gaussian_2d, (x, y), image_cutout.ravel(), p0=initial_guess, bounds=bounds
        )
        amplitude, fitted_x, fitted_y, _, _, _, _ = popt

        return fitted_x, fitted_y, amplitude

    except Exception as e:
        print(f"Fit failed for NV at ({x0}, {y0}): {e}")
        return x0, y0, 0


def integrate_intensity(image_array, nv_coords, sigma):
    """
    Integrate the intensity around each NV coordinate within a circular region
    defined by sigma, with a Gaussian weighting if needed.
    """
    intensities = []
    for coord in nv_coords:
        # Define a larger radius to ensure full capture of intensity around bright spots
        rr, cc = disk((coord[0], coord[1]), radius=sigma, shape=image_array.shape)

        # Integrate (sum) the intensity values within the disk
        intensity = np.sum(image_array[rr, cc])

        # Append integrated intensity to the list
        intensities.append(intensity)
    return intensities


def remove_outliers(intensities, nv_coords):
    # Calculate Q1 (25th percentile) and Q3 (75th percentile)
    Q1 = np.percentile(intensities, 25)
    Q3 = np.percentile(intensities, 75)
    IQR = Q3 - Q1

    # Define bounds for identifying outliers
    lower_bound = Q1 - 1.0 * IQR
    upper_bound = Q3 + 6.5 * IQR
    # lower_bound = 10
    # upper_bound = 100

    # Filter out the outliers and corresponding NV coordinates
    filtered_intensities = []
    filtered_nv_coords = []

    for intensity, coord in zip(intensities, nv_coords):
        if lower_bound <= intensity <= upper_bound:
            filtered_intensities.append(intensity)
            filtered_nv_coords.append(coord)

    return filtered_intensities, filtered_nv_coords


def remove_manual_indices(nv_coords, indices_to_remove):
    """Remove NVs based on manually specified indices"""
    return [
        coord for idx, coord in enumerate(nv_coords) if idx not in indices_to_remove
    ]


def filter_and_reorder_nv_coords(
    nv_coordinates, integrated_intensities, reference_nv, min_distance=3
):
    """
    Filters NV coordinates based on distance from each other and reorders based on distance from a reference NV.

    """
    nv_coords = [reference_nv]  # Store as list for later operations
    # Find the closest NV to the reference_nv in case it's not an exact match
    distances_to_ref = np.linalg.norm(
        np.array(nv_coordinates) - np.array(reference_nv), axis=1
    )
    closest_index = np.argmin(distances_to_ref)  # Get the index of the closest match
    reference_nv = nv_coordinates[closest_index]  # Use this as the reference
    included_indices = [closest_index]  # Track included indices

    # Filter NV coordinates based on minimum distance
    for idx, coord in enumerate(nv_coordinates):
        keep_coord = True
        for existing_coord in nv_coords:
            distance = np.linalg.norm(np.array(existing_coord) - np.array(coord))
            if distance < min_distance:
                keep_coord = False
                break
        if keep_coord:
            nv_coords.append(coord)
            included_indices.append(idx)
            # intensities.append(integrated_intensities[idx])  # Store matching intensity
    print(included_indices)
    # Reorder based on distance to the reference NV
    distances = [
        np.linalg.norm(np.array(coord) - np.array(reference_nv)) for coord in nv_coords
    ]
    sorted_indices = np.argsort(distances)
    reordered_coords = [nv_coords[idx] for idx in sorted_indices]
    reordered_intensities = [integrated_intensities[idx] for idx in sorted_indices]

    return reordered_coords, reordered_intensities, included_indices


def sigmoid_weights(intensities, threshold, beta=1):
    weights = np.exp(beta * (intensities - threshold))
    return weights / np.max(weights)  # Normalize the weights


def linear_weights(intensities, alpha=1):
    weights = 1 / np.power(intensities, alpha)
    weights = weights / np.max(weights)  # Normalize to avoid extreme values
    return weights


def non_linear_weights_adjusted(intensities, alpha=1, beta=0.5, threshold=0.5):
    # Normalize the intensities between 0 and 1
    norm_intensities = intensities / np.max(intensities)

    # Apply a non-linear transformation to only the lower intensities
    weights = np.where(
        norm_intensities > threshold,
        1,  # Keep bright NVs the same
        1
        / (1 + np.exp(-beta * (norm_intensities - threshold)))
        ** alpha,  # Non-linear scaling for low intensities
    )

    # Ensure that the weights are normalized
    weights = weights / np.max(weights)

    return weights


# Save the results to a file
def save_results(nv_coordinates, updated_spot_weights, filename):
    # Ensure the directory exists
    path = os.path.dirname(filename)
    if not os.path.exists(path):
        os.makedirs(path)  # Create the directory if it doesn't exist

    # Save the data to a .npz file
    np.savez(
        filename,
        nv_coordinates=nv_coordinates,
        # integrated_counts=integrated_intensities,
        # spot_weights=spot_weights,
        # nv_powers=nv_powers,
        updated_spot_weights=updated_spot_weights,
    )


def filter_by_snr(snr_list, threshold=0.5):
    """Filter out NVs with SNR below the threshold."""
    return [i for i, snr in enumerate(snr_list) if snr >= threshold]


def load_nv_coords(
    # file_path="slmsuite/nv_blob_detection/nv_blob_filtered_77nvs_new.npz",
    file_path="slmsuite/nv_blob_detection/nv_blob_filtered_240nvs.npz",
):
    data = np.load(file_path)
    print(data.keys())
    nv_coordinates = data["nv_coordinates"]
    # spot_weights = data["spot_weights"]
    spot_weights = data["updated_spot_weights"]
    # spot_weights = data["integrated_counts"]
    # spot_weights = data["integrated_counts"]
    return nv_coordinates, spot_weights


def load_nv_weights(file_path="optimal_separation_and_goodness.txt"):
    # Load data, skipping the header row
    data = np.loadtxt(file_path, delimiter=",", skiprows=1)
    # Extract the step values for separation
    nv_weights = data[:, 2]  # Step Val (Separation) is the 3rd column (index 2)
    return nv_weights


def sigmoid_weight_update(
    fidelities, spot_weights, intensities, alpha=1, beta=10, fidelity_threshold=0.90
):
    # Normalize intensities between 0 and 1
    norm_intensities = intensities / np.max(intensities)

    # Initialize updated weights as 1 (i.e., no change for high-fidelity NVs)
    updated_weights = np.copy(spot_weights)

    # Loop over each NV and update weights for those with fidelity < fidelity_threshold
    for i, fidelity in enumerate(fidelities):
        if fidelity < fidelity_threshold:
            # Use a sigmoid to adjust the weight based on intensity
            updated_weights[i] = (
                1 / (1 + np.exp(-beta * (norm_intensities[i]))) ** alpha
            )

    # Normalize the updated weights to avoid extreme values
    updated_weights = updated_weights / np.max(updated_weights)

    return updated_weights


def manual_sigmoid_weight_update(
    spot_weights, intensities, alpha, beta, update_indices
):
    updated_spot_weights = (
        spot_weights.copy()
    )  # Make a copy to avoid mutating the original list
    norm_intensities = intensities / np.max(intensities)
    for idx in update_indices:
        print(f"NV Index {idx}: Weight before update: {updated_spot_weights[idx]}")

        # Apply the sigmoid weight update for the specific NV
        weight_update = 1 / (1 + np.exp(-beta * (norm_intensities[idx]))) ** alpha
        updated_spot_weights[idx] = weight_update  # Update weight for this NV

        print(f"NV Index {idx}: Weight after update: {updated_spot_weights[idx]}")

    return updated_spot_weights


# Adjust weights based on SNR values
def adjust_weights_sigmoid(spot_weights, snr_values, alpha=1.0, beta=0.001):
    """Apply sigmoid adjustment to spot weights based on SNR values."""
    updated_weights = np.copy(spot_weights)
    for i, value in enumerate(snr_values):
        if value < 0.9:
            # Sigmoid-based weight adjustment
            updated_weights[i] = 1 / (1 + np.exp(-beta * (value - alpha)))
    return updated_weights


def filter_by_peak_intensity(fitted_data, threshold=0.5):
    filtered_coords = []
    filtered_intensities = []

    for x, y, intensity in fitted_data:
        if intensity >= threshold:
            filtered_coords.append((x, y))
            filtered_intensities.append(intensity)

    return filtered_coords, filtered_intensities


def adjust_aom_voltage_for_slm(nv_amp, aom_voltage, power_law_params):
    nv_amp = np.array(nv_amp)
    a, b, c = power_law_params

    aom_voltages = nv_amp * aom_voltage

    nv_powers = a * (aom_voltages**b) + c
    scaled_nv_powers = nv_powers / (len(nv_powers))
    # Normalize powers across all spots
    total_power = np.sum(scaled_nv_powers)
    nv_weights = nv_powers / total_power
    # Compute adjusted AOM voltage for the total power
    adjusted_aom_voltage = ((total_power - c) / a) ** (1 / b)
    return nv_weights, adjusted_aom_voltage


def curve_extreme_weights_simple(weights, scaling_factor=1.0):
    median = np.median(weights)

    curved_weights = [1 / (1 + np.exp(-scaling_factor * (w - median))) for w in weights]

    return curved_weights


def curve_inverse_counts(counts, scaling_factor=0.5):
    median_count = np.median(counts)
    adjusted_weights = np.exp(-scaling_factor * (counts / median_count))
    adjusted_weights /= np.max(adjusted_weights)
    return adjusted_weights


def select_half_left_side_nvs_and_plot(nv_coordinates):
    # Filter NVs on the left side (x < median x)
    median_x = np.median(nv_coordinates[:, 0])
    left_side_indices = [
        i for i, coord in enumerate(nv_coordinates) if coord[0] < median_x
    ]

    # Randomly select half of the NVs from the left side
    print(f"Selected {len(left_side_indices)} NVs from the left side.")

    # Plot distribution
    plt.figure(figsize=(10, 7))

    # Plot all NVs
    plt.scatter(
        nv_coordinates[:, 0], nv_coordinates[:, 1], color="gray", label="All NVs"
    )

    # Highlight left-side NVs
    left_coords = nv_coordinates[left_side_indices]
    plt.scatter(
        left_coords[:, 0], left_coords[:, 1], color="blue", label="Left Side NVs"
    )

    # Add median line
    plt.axvline(
        median_x, color="green", linestyle="--", label=f"Median X = {median_x:.2f}"
    )

    # Labels and legend
    plt.title("NV Distribution with Left Side Selection", fontsize=16)
    plt.xlabel("X Coordinate", fontsize=14)
    plt.ylabel("Y Coordinate", fontsize=14)
    plt.legend(fontsize=12)
    plt.grid(True)
    plt.show()

    return


# Main section of the code
if __name__ == "__main__":
    kpl.init_kplotlib()
    # Parameters
    remove_outliers_flag = False  # Set this flag to enable/disable outlier removal
    reorder_coords_flag = True  # Set this flag to enable/disable reordering of NVs
    data = dm.get_raw_data(
        file_stem="2025_09_27-18_21_57-rubin-nv0_2025_09_08", load_npz=True
    )
    img_array = np.array(data["ref_img_array"])
    # img_array = data["img_array"]
    nv_coordinates, spot_weights = load_nv_coords(
        file_path="slmsuite/nv_blob_detection/nv_blob_327nvs.npz"
    )
    # Convert coordinates to a standard format (lists of lists)
    # nv_coordinates = [[coord[0] - 3, coord[1] + 3] for coord in nv_coordinates]
    nv_coordinates = [list(coord) for coord in nv_coordinates]
    # Filter NV coordinates: Keep only those where both x and y are in [0, 250]
    nv_coordinates_filtered = [
        coord
        for coord in nv_coordinates
        if isinstance(coord, (list, tuple))
        and len(coord) == 2
        and all(2 <= x <= 248 for x in coord)
    ]

    # Ensure spot weights are filtered accordingly
    spot_weights_filtered = [
        weight
        for coord, weight in zip(nv_coordinates, spot_weights)
        if isinstance(coord, (list, tuple))
        and len(coord) == 2
        and all(2 <= x <= 248 for x in coord)
    ]

    # Replace original lists with filtered versions
    nv_coordinates = nv_coordinates_filtered
    spot_weights = spot_weights_filtered

    print(f"After filtering: {len(spot_weights)} NVs")

    # Filter and reorder NV coordinates based on reference NV
    # integrated_intensities = []
    sigma = 3
    reference_nv = [124.195, 127.341]
    filtered_reordered_coords, filtered_reordered_spot_weights, include_indices = (
        filter_and_reorder_nv_coords(
            nv_coordinates, spot_weights, reference_nv, min_distance=6
        )
    )
    # filtered_reordered_coords = [
    #     [coord[0] - 5, coord[1] - 0] for coord in filter_and_reorder_nv_coords
    # ]

    # Integration over disk region around each NV coordinate
    # filtered_reordered_counts = []
    # integration_radius = 3.0
    # for coord in filtered_reordered_coords:
    #     x, y = coord[:2]  # Assuming `coord` contains at least two elements (y, x)
    #     rr, cc = disk((y, x), integration_radius, shape=img_array.shape)
    #     sum_value = np.sum(img_array[rr, cc])
    #     filtered_reordered_counts.append(sum_value)

    # # calcualte spot weight  based on
    # calcualted_spot_weights = linear_weights(filtered_reordered_counts, alpha=0.3)
    # filtered_reordered_spot_weights = calcualted_spot_weights
    # Manually remove NVs with specified indices
    indices_to_remove = [7]
    filtered_reordered_coords_0 = [
        coord
        for i, coord in enumerate(filtered_reordered_coords)
        if i not in indices_to_remove
    ]
    filtered_reordered_spot_weights_0 = [
        count
        for i, count in enumerate(filtered_reordered_spot_weights)
        if i not in indices_to_remove
    ]
    filtered_reordered_coords = filtered_reordered_coords_0
    filtered_reordered_spot_weights = filtered_reordered_spot_weights_0

    # print(filtered_reordered_coords)
    # print("Filter:", filtered_reordered_counts)
    # print("Filtered and Reordered NV Coordinates:", filtered_reordered_coords)
    # print("Filtered and Reordered NV Coordinates:", integrated_intensities)

    # Initialize lists to store the results
    # fitted_amplitudes = []
    # for coord in filtered_reordered_coords:
    #     fitted_x, fitted_y, amplitude = fit_gaussian(img_array, coord, window_size=2)
    #     fitted_amplitudes.append(amplitude)

    # fmt: off
    # spot_weights = [0.7639806329281399, 0.6941606174540103, 0.8370787529549714, 0.9933550511548964, 0.8370787529549714, 0.6941606174540103, 0.9135165356732688, 0.7639806329281399, 0.6941606174540103, 1.6524796663239836, 1.076654897648458, 0.8370787529549714, 0.7639806329281399, 1.1634762168908646, 0.9933550511548964, 2.113049120896413, 0.8370787529549714, 0.6941606174540103, 1.5471638659801386, 0.6941606174540103, 0.6941606174540103, 0.7639806329281399, 1.1634762168908646, 0.6941606174540103, 1.2538787085616896, 1.2538787085616896, 0.8370787529549714, 1.1634762168908646, 0.8370787529549714, 0.7639806329281399, 0.6941606174540103, 1.076654897648458, 1.7616689604652773, 1.1634762168908646, 0.9135165356732688, 1.5471638659801386, 0.9135165356732688, 1.076654897648458, 0.6941606174540103, 0.9135165356732688, 1.1634762168908646, 0.9933550511548964, 1.9918969123978685, 0.6941606174540103, 0.9933550511548964, 1.874789058964759, 0.8370787529549714, 0.6941606174540103, 0.9933550511548964, 0.9933550511548964, 0.8370787529549714, 0.9933550511548964, 0.8370787529549714, 1.5471638659801386, 0.6941606174540103, 0.6941606174540103, 0.9135165356732688, 0.6941606174540103, 0.6941606174540103, 1.445663878876896, 0.9135165356732688, 0.9135165356732688, 0.7639806329281399, 1.076654897648458, 0.9135165356732688, 0.8370787529549714, 0.7639806329281399, 0.9135165356732688, 0.7639806329281399, 0.9933550511548964, 1.076654897648458, 0.9933550511548964, 0.7639806329281399, 0.9933550511548964, 0.8370787529549714, 0.8370787529549714, 1.076654897648458, 0.8370787529549714, 0.8370787529549714, 0.7639806329281399, 1.445663878876896, 0.9933550511548964, 1.9918969123978685, 0.9933550511548964, 0.8370787529549714, 1.5471638659801386, 1.1634762168908646, 0.8370787529549714, 0.6941606174540103, 0.7639806329281399, 0.9933550511548964, 0.8370787529549714, 0.9135165356732688, 0.7639806329281399, 1.2538787085616896, 1.5471638659801386, 0.6941606174540103, 0.9933550511548964, 0.8370787529549714, 0.8370787529549714, 0.8370787529549714, 1.076654897648458, 1.9918969123978685, 0.7639806329281399, 0.8370787529549714, 0.8370787529549714, 0.8370787529549714, 1.076654897648458, 0.6941606174540103, 1.076654897648458, 0.7639806329281399, 0.9933550511548964, 1.076654897648458, 1.445663878876896, 0.7639806329281399, 0.6941606174540103, 1.2538787085616896, 0.8370787529549714, 1.445663878876896, 0.9933550511548964, 0.8370787529549714, 1.1634762168908646, 2.113049120896413, 0.6941606174540103, 0.9135165356732688, 1.076654897648458, 0.8370787529549714, 1.076654897648458, 0.9135165356732688, 0.6941606174540103, 0.7639806329281399, 0.9933550511548964, 0.7639806329281399, 1.076654897648458, 1.076654897648458, 0.7639806329281399, 0.8370787529549714, 0.8370787529549714, 0.9135165356732688, 0.9933550511548964, 1.076654897648458, 0.9933550511548964, 0.9135165356732688, 1.5471638659801386, 0.8370787529549714, 0.7639806329281399, 0.7639806329281399, 0.6941606174540103, 1.1634762168908646, 0.9135165356732688, 1.3479216439475352, 0.6941606174540103, 1.076654897648458, 0.8370787529549714, 0.9933550511548964, 0.8370787529549714, 1.076654897648458, 0.9135165356732688, 1.2538787085616896, 0.9933550511548964, 0.9135165356732688, 1.076654897648458, 0.8370787529549714, 0.9135165356732688, 0.6941606174540103, 0.8370787529549714, 0.7639806329281399, 0.9933550511548964, 1.076654897648458, 1.5471638659801386, 0.6941606174540103, 0.9135165356732688, 1.1634762168908646, 0.7639806329281399, 0.9135165356732688, 1.3479216439475352, 0.9135165356732688, 0.8370787529549714, 0.7639806329281399, 1.076654897648458, 0.6941606174540103, 0.8370787529549714, 0.6941606174540103, 0.6941606174540103, 0.7639806329281399, 1.445663878876896, 1.445663878876896, 0.7639806329281399, 0.8370787529549714, 1.076654897648458, 0.9135165356732688, 1.6524796663239836, 0.7639806329281399, 1.2538787085616896, 0.7639806329281399, 0.9135165356732688, 0.7639806329281399, 0.6941606174540103, 0.6941606174540103, 0.9135165356732688, 0.9933550511548964, 1.1634762168908646, 0.9933550511548964, 1.3479216439475352, 0.9135165356732688, 1.5471638659801386, 0.8370787529549714, 0.9933550511548964, 0.8370787529549714, 0.9135165356732688, 0.9933550511548964, 1.1634762168908646, 0.6941606174540103, 0.6941606174540103, 0.6941606174540103, 0.9933550511548964, 0.9933550511548964, 1.076654897648458, 1.3479216439475352, 0.9135165356732688, 1.2538787085616896, 0.9933550511548964, 0.6941606174540103, 0.9135165356732688, 0.9933550511548964, 0.9933550511548964, 1.076654897648458, 1.2538787085616896, 0.7639806329281399, 1.1634762168908646, 1.1634762168908646, 1.874789058964759, 0.7639806329281399, 1.2538787085616896, 0.9933550511548964, 0.9135165356732688, 1.076654897648458, 0.6941606174540103, 0.8370787529549714, 0.6941606174540103, 0.8370787529549714, 0.7639806329281399, 0.8370787529549714, 0.9135165356732688, 1.076654897648458, 1.9918969123978685, 0.9933550511548964, 0.9135165356732688, 1.445663878876896, 0.7639806329281399, 0.9933550511548964, 0.9135165356732688, 1.1634762168908646, 1.1634762168908646, 1.1634762168908646, 1.7616689604652773, 1.076654897648458, 0.8370787529549714, 1.076654897648458, 1.076654897648458, 0.8370787529549714, 1.076654897648458, 1.1634762168908646, 1.2538787085616896, 0.8370787529549714, 0.7639806329281399, 0.9933550511548964, 0.8370787529549714, 0.9135165356732688, 0.7639806329281399, 0.9135165356732688, 1.874789058964759, 1.2538787085616896, 0.9135165356732688, 0.9933550511548964, 1.1634762168908646, 0.9135165356732688, 1.1634762168908646, 0.8370787529549714, 1.3479216439475352, 0.6941606174540103, 0.9933550511548964, 1.076654897648458, 0.9135165356732688, 1.2538787085616896, 0.9933550511548964, 1.2538787085616896, 1.1634762168908646, 0.6941606174540103, 0.8370787529549714, 0.9933550511548964, 0.6941606174540103, 1.076654897648458, 0.7639806329281399, 1.2538787085616896, 0.9135165356732688, 0.7639806329281399, 1.1634762168908646, 0.7639806329281399, 0.9933550511548964, 0.6941606174540103, 0.9933550511548964, 1.445663878876896, 0.9135165356732688, 1.2538787085616896, 1.076654897648458, 1.445663878876896, 0.9933550511548964, 0.9933550511548964, 0.8370787529549714, 0.7639806329281399, 1.076654897648458, 0.9135165356732688, 1.874789058964759, 0.9135165356732688, 0.6941606174540103, 1.076654897648458, 1.1634762168908646, 0.8370787529549714, 0.8370787529549714, 2.113049120896413, 1.3479216439475352, 0.9135165356732688, 1.076654897648458, 0.9135165356732688, 0.7639806329281399, 0.8370787529549714, 0.6941606174540103, 1.076654897648458, 0.7639806329281399, 0.7639806329281399, 1.076654897648458, 0.6941606174540103, 1.2538787085616896, 1.2538787085616896, 1.445663878876896, 0.8370787529549714]
    pol_durs =  [220, 220, 600, 600, 332, 332, 348, 348, 296, 296, 340, 340, 428, 428, 276, 276, 292, 292, 280, 280, 284, 284, 376, 376, 344, 344, 600, 600, 528, 528, 600, 600, 288, 288, 352, 352, 600, 600, 376, 376, 364, 364, 220, 220, 600, 600, 300, 300, 1168, 1168, 208, 208, 260, 260, 488, 488, 600, 600, 536, 536, 296, 296, 344, 344, 392, 392, 212, 212, 600, 600, 600, 600, 448, 448, 624, 624, 364, 364, 600, 600, 600, 600, 600, 600, 760, 760, 284, 284, 400, 400, 600, 600, 448, 448, 372, 372, 300, 300, 352, 352, 396, 396, 280, 280, 576, 576, 216, 216, 680, 680, 384, 384, 476, 476, 304, 304, 600, 600, 292, 292, 600, 600, 600, 600, 556, 556, 352, 352, 308, 308, 340, 340, 576, 576, 324, 324, 552, 552, 600, 600, 348, 348, 824, 824, 440, 440, 452, 452, 332, 332, 1184, 1184, 492, 492, 1464, 1464, 452, 452, 600, 600, 504, 504, 636, 636, 768, 768, 456, 456, 304, 304, 404, 404, 376, 376, 292, 292, 376, 376, 388, 388, 304, 304, 600, 600, 476, 476, 296, 296, 600, 600, 308, 308, 344, 344, 444, 444, 360, 360, 732, 732, 384, 384, 372, 372, 480, 480, 340, 340, 600, 600, 292, 292, 316, 316, 292, 292, 600, 600, 492, 492, 412, 412, 380, 380, 376, 376, 436, 436, 232, 232, 1328, 1328, 736, 736, 600, 600, 440, 440, 1416, 1416, 600, 600, 592, 592, 600, 600, 408, 408, 1120, 1120, 336, 336, 832, 832, 1180, 1180, 600, 600, 212, 212, 696, 696, 372, 372, 600, 600, 440, 440, 472, 472, 600, 600, 660, 660, 356, 356, 600, 600, 600, 600, 836, 836, 1456, 1456, 600, 600, 576, 576, 396, 396, 1052, 1052, 804, 804, 444, 444, 296, 296, 648, 648, 528, 528, 600, 600, 432, 432, 544, 544, 748, 748, 820, 820, 872, 872, 696, 696, 600, 600, 640, 640, 332, 332, 1340, 1340, 584, 584, 436, 436, 1020, 1020, 436, 436, 476, 476, 320, 320, 292, 292, 508, 508, 1056, 1056, 732, 732, 420, 420, 672, 672, 384, 384, 912, 912, 428, 428, 300, 300, 600, 600, 600, 600, 320, 320, 464, 464, 596, 596, 496, 496, 588, 588, 556, 556, 1148, 1148, 600, 600, 972, 972, 312, 312, 600, 600, 832, 832, 676, 676, 740, 740, 652, 652, 600, 600, 524, 524, 288, 288, 1204, 1204, 420, 420, 464, 464, 1396, 1396, 372, 372, 832, 832, 528, 528, 980, 980, 424, 424, 444, 444, 576, 576, 436, 436, 492, 492, 856, 856, 1008, 1008, 516, 516, 708, 708, 300, 300, 596, 596, 548, 548, 696, 696, 656, 656, 500, 500, 616, 616, 576, 576, 676, 676, 300, 300, 656, 656, 600, 600, 600, 600, 804, 804, 600, 600, 652, 652, 632, 632, 504, 504, 696, 696, 1060, 1060, 600, 600, 452, 452, 600, 600, 600, 600, 848, 848, 748, 748, 352, 352, 436, 436, 392, 392, 888, 888, 1024, 1024, 708, 708, 572, 572, 380, 380, 612, 612, 832, 832, 500, 500, 948, 948, 316, 316, 600, 600, 684, 684, 672, 672, 1148, 1148, 532, 532, 1276, 1276, 908, 908, 1288, 1288, 584, 584, 1484, 1484, 376, 376, 808, 808, 600, 600, 608, 608, 1180, 1180, 560, 560, 752, 752, 676, 676, 636, 636, 620, 620, 348, 348, 576, 576, 600, 600, 1412, 1412, 600, 600, 1180, 1180, 600, 600, 292, 292, 600, 600, 1092, 1092, 600, 600, 1488, 1488, 792, 792, 1040, 1040, 372, 372, 548, 548, 1236, 1236, 372, 372, 600, 600, 1260, 1260, 600, 600, 664, 664, 600, 600, 1272, 1272, 808, 808, 776, 776, 600, 600, 348, 348, 600, 600, 488, 488, 600, 600, 1496, 1496, 984, 984, 332, 332, 600, 600, 1212, 1212, 708, 708, 1220, 1220, 548, 548, 600, 600, 652, 652, 512, 512, 628, 628, 600, 600, 968, 968, 608, 608, 708, 708, 600, 600, 668, 668, 600, 600, 456, 456, 1272, 1272, 980, 980, 1492, 1492, 940, 940, 600, 600, 912, 912, 788, 788, 380, 380, 600, 600, 1108, 1108, 600, 600, 564, 564]  
    # readout_fidelity_list = [0.9477047684759228, 0.9019818104643178, 0.8869424289422583, 0.8381743391846024, 0.8576575496010796, 0.9789948892600422, 0.9638993329049552, 0.898366866628016, 0.8604145527053273, 0.8861698170034036, 0.9824776181718651, 0.8632153550685691, 0.827672837417338, 0.927171893427586, 0.8822325221734786, 0.9335430372381681, 0.9305713453369437, 0.8392023405939457, 0.9861011802108127, 0.8157486804611144, 0.7635968721186288, 0.8711321507405378, 0.8574018789954898, 0.9471240606747452, 0.8650241124111886, 0.7795173546830179, 0.8732039647833363, 0.9338104014779514, 0.9558981985343431, 0.9391611929957264, 0.9146476193680994, 0.8992855080604256, 0.9613121033462165, 0.9125277803864742, 0.9070326503772176, 0.7289693973579674, 0.9190545774848456, 0.9644449654863876, 0.8590194214802065, 0.9643977344841653, 0.8603012481973368, 0.8845957133999363, 0.9552186011814754, 0.8515459948543522, 0.8980333350254648, 0.9716402120536309, 0.8522768342108857, 0.75622300754898, 0.9012066681957438, 0.9078009184861564, 0.8813860966569098, 0.8906270590642871, 0.6954828186651594, 0.9023113184799078, 0.9416157243632285, 0.9178077991021585, 0.8818202711657068, 0.9771970009801894, 0.9349259629962237, 0.8692708549090551, 0.854909203398497, 0.9023536389202814, 0.8512346919968676, 0.9477524834507026, 0.8063005325042703, 0.8538797306542765, 0.9013512695010479, 0.7604219350887882, 0.8744548346014547, 0.8657098687476656, 0.8387730037442622, 0.8684496640789188, 0.9859277707961333, 0.8935054598943357, 0.937619675461284, 0.9684405921354535, 0.8999958079842622, 0.8769228046774404, 0.9259117545377555, 0.8785323119270279, 0.8151894722545696, 0.77971972500513, 0.8685481837641937, 0.9202166442782336, 0.8348105143985896, 0.8665580733373157, 0.8964005801357365, 0.7562539124805354, 0.8175266807405168, 0.9522214635766373, 0.818234794128154, 0.8931226388565615, 0.7541957525214444, 0.9250728459413826, 0.9001273915957506, 0.8718575938311778, 0.9332501628450971, 0.8441823712242635, 0.8586999734122533, 0.9255926356381402, 0.7609410590843866, 0.7760097193174632, 0.9207434709236447, 0.8745998904333208, 0.8339751355176769, 0.8516457240228907, 0.958969164565675, 0.9363830599017577, 0.8181843448249657, 0.8387597854986653, 0.8179687858039217, 0.7031746240540488, 0.7963382307094786, 0.9134333637733909, 0.9316656652625475, 0.8018907428540498, 0.9004409702526284, 0.8978715238068812, 0.8785740525205237, 0.8226698047862844, 0.799027545443247, 0.9239376094021214, 0.7754937730014869, 0.8003221282970276, 0.7795875836832522, 0.8122553700422762, 0.8583800093124666, 0.8279303898022159, 0.8304265331226003, 0.775813851482352, 0.7886620039060024]
    # readout_fidelity_list =  [0.9259485402803912, 0.8339039769895423, 0.8595984885676781, 0.8081392630151907, 0.8234158147076999, 0.8123221530912157, 0.7922509205021537, 0.8405289075182883, 0.7876077918659318, 0.8878408601841635, 0.830043441766837, 0.8205615522062822, 0.7968483975835933, 0.7820654380780656, 0.8197675304331178, 0.7303919355161319, 0.864953654169626, 0.8635304289129632, 0.840202755191646, 0.787999675512814, 0.7770393860205684, 0.7756188884598327, 0.8097113305579873, 0.8009907056617462, 0.8550076260115618, 0.8634401282776074, 0.8938518960529322, 0.8137149470423632, 0.8041561910642364, 0.7921804108459873, 0.7770759018245221, 0.8621889301400414, 0.9091839172264803, 0.8571069979819677, 0.8484460249917956, 0.8429422907610864, 0.8052650081558169, 0.8191337853105544, 0.9052279975980804, 0.8560186628779528, 0.8771029832095167, 0.742938651929129, 0.8782296692665752, 0.7940360651194067, 0.8005707437861304, 0.7953089897700227, 0.7597457460596739, 0.9136184696705552, 0.8226960871236298, 0.7934602010614429, 0.8118197496516744, 0.8408341390570644, 0.8702408212748518, 0.854115550956333, 0.8209940335495902, 0.9473936463295176, 0.8210115446698093, 0.7142143524925549, 0.7896467670806082, 0.8491109396935961, 0.8387779166199874, 0.7851892612218451, 0.88677449049094, 0.7884124900935565, 0.9179035111094656, 0.7584487763889272, 0.833812417885826, 0.7759278638288165, 0.87131848412769, 0.836989431663419, 0.778717523864215, 0.7850775909156418, 0.8242744174717951, 0.8049417413706224, 0.8935960355217296, 0.7650835509146505, 0.9102918530206665, 0.8219931186050295, 0.835870319709195, 0.815227756110794, 0.9414343110313149, 0.8161684942489593, 0.8336247320105874, 0.8123727199883475, 0.8023840073428042, 0.8626909432114, 0.781532968522149, 0.9006029309164216, 0.959805892486273, 0.8471527640979003, 0.8584860957551577, 0.8206705913607573, 0.7923080828671701, 0.9023486641629513, 0.8802979361444974, 0.8403265670092133, 0.883676929711316, 0.8319481106178355, 0.8636950922771218, 0.8554819872226469, 0.7505554351696244, 0.9382245901577386, 0.825502318306117, 0.9008767747420494, 0.8865035793832619, 0.7905132794635958, 0.8411038920689717, 0.7729571514941493, 0.87779891574703, 0.8704855081599072, 0.6970785599480573, 0.8296591127020446, 0.8969628782941436, 0.9319743671810263, 0.800793796233238, 0.8330182298033622, 0.8351643798557193, 0.7721030438645876, 0.8253360663842217, 0.8863376622177456, 0.8009498911715986, 0.772909918302364, 0.7616877919698695, 0.8293680225569556, 0.8358760505421634, 0.8988286314690198, 0.8209017772128824, 0.8761035054232216, 0.8415242933842461, 0.8756353470882534, 0.867638255903711, 0.9024244980605447, 0.809333354807092, 0.7762832553363249, 0.9334854601896858, 0.9133944942928259, 0.8888074644614034, 0.8347832145659033, 0.8538320117674016, 0.9644862764488685, 0.7686526345566637, 0.8104459274382361, 0.825315479938721, 0.8751535952341831, 0.8234540175884528, 0.9287696126827261, 0.8167798139499343, 0.8942920383605926, 0.8457581887904326, 0.7492651447798184, 0.8668481408097091, 0.8346376451905545, 0.8164480079207774, 0.7983932602304591, 0.8268589304532348, 0.7906534414377806, 0.7863384566764122, 0.8501785571014491, 0.7769552024501835, 0.8107010004375621, 0.9216661468354459, 0.7751195320896407, 0.8806071157373865, 0.9165667682816471, 0.7972466257354097, 0.8419721543482246, 0.826125546468395, 0.8586800348241272, 0.8084443548565965, 0.8434639689228725, 0.8218204525616382, 0.8467939070445858, 0.7938872249450217, 0.817423442178677, 0.8117703642688485, 0.8262641311038823, 0.8352709831061449, 0.8967576029995278, 0.7731466751935715, 0.7674978338721955, 0.8553593017039127, 0.8585825867790111, 0.931814249497828, 0.8480635352290486, 0.8801726280509234, 0.8121684155467604, 0.7880014050269188, 0.7551960757451706, 0.7984186400188158, 0.7781446079117686, 0.9149519840411232, 0.76646504156765, 0.7859730429035267, 0.7992290174756947, 0.9178634934981358, 0.87338952109444, 0.8961270223344239, 0.7947730985418084, 0.9186828444614668, 0.8143885685807248, 0.9072446624330062, 0.8470611281954981, 0.8364659138685966, 0.7787548723801399, 0.8026206504357241, 0.7333976903265829, 0.7944141959059927, 0.7482334069502017, 0.8819254711125876, 0.8380969237120169, 0.8932304055774474, 0.8210166928916856, 0.8482331182183165, 0.8185053421623953, 0.7698976812967636, 0.9259114533465627, 0.8103074946346398, 0.7951087977580683, 0.8876966829042653, 0.799026272964191, 0.8784790532823268, 0.8466568858879513, 0.8843489651712432, 0.8397115628111181, 0.8450479249895841, 0.8257654707160395, 0.7561050648598802, 0.9013403784627361, 0.7986179128356039, 0.7644549596676655, 0.902254297662805, 0.9282251362286305, 0.7835384174847476, 0.7701072122675381, 0.8131599960048902, 0.8208857484346679, 0.8391972963686141, 0.8559956470133399, 0.7736316116689349, 0.9132976983572207, 0.8140100898991798, 0.9419885200488886, 0.8658104368011279, 0.830637376422574, 0.8732031410808386, 0.8100967841123479, 0.796499445909914, 0.830161780172092, 0.8258349024718503, 0.794251260771238, 0.7941560155649655, 0.8786017178653777, 0.8515990538824889, 0.8997013439076154, 0.7302997174916701, 0.8620808316099771, 0.8063521098300692, 0.7370785505415984, 0.8366361450854138, 0.7879047082624253, 0.8007930894777908, 0.8075712024479837, 0.9128844588669907, 0.8809189326806353, 0.7999087387158441, 0.7853939079154244, 0.8690448921389595, 0.8291858988135569, 0.847441293292809, 0.8271945172727182, 0.8982794429491321, 0.8598047074854089, 0.934955184703004, 0.9118931455501724, 0.8105883911935254, 0.7259835456483678, 0.7758403223431225, 0.8258106515190573, 0.8332453694416257, 0.913401529089612, 0.7830161040449639, 0.8266542007178713, 0.8468761721405004, 0.8043119946896606, 0.8125044169498119, 0.8238978822187895, 0.8418036292180856, 0.7592663861931589, 0.8697637482019867, 0.8095823387131047, 0.7728875319653783, 0.896775024497962, 0.8109350895735481, 0.847551059040607, 0.8989694942510161, 0.8677736338940389, 0.8655784589453834, 0.832660183350429, 0.7964479545138742, 0.8216389009559424, 0.8161630760246281, 0.7895321967935041, 0.9148524957148545, 0.8165836962040913, 0.8905883637322018, 0.8756648386480078, 0.8424492638741734, 0.8671425860899755, 0.8347141970657842, 0.8176682904497032, 0.7949426277633587, 0.7376039870624223, 0.7849592151378425, 0.8308340178480438, 0.8011154950454367, 0.8295470738834978, 0.8538273510023766, 0.8178213279929263, 0.8560835130031277, 0.7864410747605444, 0.8641543189445385, 0.7800642966190806, 0.7775148712993006, 0.8072554675679546, None, 0.852718939318108, 0.8143048653997387, 0.793454808980086] 
    readout_fidelity_list = [0.9002154650166205, 0.774249249685518, 0.7598621017562739, 0.8391803938858824, 0.8893722359210088, 0.7615947971538097, 0.7926642194488477, 0.8992039926162677, 0.8269073765066546, 0.9236942894976775, 0.8344502317496327, 0.8702998625684603, 0.8346664292413348, 0.8164450684295355, 0.9024291445341758, 0.8424435156388292, 0.7315193076535227, 0.8477605180943346, 0.7562866943496686, 0.7961129090167416, 0.7869724915758644, 0.7731975926465303, 0.7771494316196499, 0.7131828971900795, 0.867854269152323, 0.7958360844870115, 0.8279587477431114, 0.8392008251892911, 0.8228023175449686, 0.7644450230654046, 0.7835442944417765, 0.8496954131558203, 0.8665847035689775, 0.7717292719017368, 0.7809095390885652, 0.8839861439199934, 0.8151158757514123, 0.7981221130824694, 0.8996549403589889, 0.9022408450104558, 0.8323009203826892, 0.8793158408285896, 0.7825331943375955, 0.7438178080818953, 0.8160649651203011, 0.7944665246911446, 0.8542271104640424, 0.8052584952445622, 0.7944936543135386, 0.8055083538643362, 0.7877282059883605, 0.890259616745307, 0.8376304813843559, 0.8534641162885939, 0.857495246351428, 0.8902422773592469, 0.8927188350273991, 0.714508364800918, 0.8219305035601225, 0.8432412814864989, 0.8593955094730428, 0.8780378404562713, 0.7755506575631084, 0.7748239851089489, 0.7892686820099301, 0.8972553634485426, 0.755333167957178, 0.8445937880956046, 0.848921853341861, 0.7957277250395483, 0.797353912855434, 0.8440739423584391, 0.7916289941121092, 0.8562706599126003, 0.8049836243494004, 0.7500499617111669, 0.8787571785391145, 0.8131969197822964, 0.8822510567389207, 0.7949910836956897, 0.8999763790862502, 0.8068303501064114, 0.8229401541039096, 0.8217004973782261, 0.8009315901922334, 0.7686328301105894, 0.8287633996459927, 0.8112151101112814, 0.8548321675709706, 0.9077396633818218, 0.7678041365584436, 0.748886045700905, 0.8467700928051796, 0.9092316244910481, 0.8507492729393742, 0.7204177730896877, 0.872632495080479, 0.7467475008765698, 0.9333895658780939, 0.8700841469744446, 0.7616954863158499, 0.8188589938778172, 0.8720420384878453, 0.7767145586695852, 0.8833091116589211, 0.779766471344703, 0.7807761014089944, 0.7927451542078984, 0.7453967340883594, 0.9331388266944235, 0.7944829230325237, 0.8114395224663404, 0.8721500101250049, 0.9208610381645086, 0.8015697681036185, 0.8013103259829083, 0.7986151054408699, 0.7804867541066334, 0.7520859685930636, 0.7871453659794398, 0.7458588034128457, 0.7767687491563806, 0.8361370634313265, 0.8154002154031448, 0.9189409789631477, 0.9308218423842722, 0.7440741121311749, 0.8089990279408583, 0.843010485956716, 0.7661298544992822, 0.7833972415242371, 0.8318079921678138, 0.8745674195088844, 0.7905898672734843, 0.8221790828487037, 0.7992978323813374, 0.8174607508881323, 0.7947158649761956, 0.8223761897655707, 0.8290016223298898, 0.8204730024783529, 0.8766759750646962, 0.7541016432970513, 0.8401649642048801, 0.8720646745337761, 0.8609084024469447, 0.8098675871743295, 0.8534449383507765, 0.8190032123701156, 0.8502680373281719, 0.8063412668875368, 0.8171977980464764, 0.8122445479838307, 0.8041054835097816, 0.8187481225423294, 0.7738507920210379, 0.7671804889581191, 0.8284747241438059, 0.9068871907166862, 0.7740255049283536, 0.7779053402524634, 0.7594278346192505, 0.8342041574438803, 0.8177164095813636, 0.8050516689100427, 0.7647255965643625, 0.8126979291901857, 0.8446037607504436, 0.8509651711840047, 0.7795593491971703, 0.7699784852327962, 0.7746375705916317, 0.8277488042828762, 0.7356275385388769, 0.7730792507276598, 0.8293028364946127, 0.8965660025651705, 0.7742423558622484, 0.7662617671703091, 0.7450010167558296, 0.9096266139972428, 0.8186025246262041, 0.9085633803102602, 0.8398615698768774, 0.8421629677097833, 0.8320984349333813, 0.8083331197428738, 0.8108015803526328, 0.843778548415782, 0.7596630518530066, 0.8610761985037378, 0.8116664410152487, 0.8607631354619607, 0.8976530608848856, 0.8063252573814134, 0.8227145016175643, 0.8887057826244302, 0.8035789861342026, 0.861236872577136, 0.8692538039806161, 0.7904557390251337, 0.803112449392043, 0.6988263777811977, 0.8074103753880103, 0.8474341312578466, 0.7565954307582938, 0.8024533261250533, 0.8961711751163204, 0.8185443180027177, 0.8829467636762149, 0.8093977075853476, 0.8565396479359888, 0.7979300331424641, 0.7989296200762979, 0.8108596581273319, 0.8072051431323536, 0.7985719587733231, 0.8353142713001176, 0.8074639009651137, 0.8050782352152641, 0.7915086567325685, 0.8384399921431582, 0.8448950327662742, 0.7468100463872347, 0.8151567156558108, 0.7901674463186046, 0.7493890261181133, 0.8539003549036264, 0.7836927471734948, 0.7844890609948778, 0.7970431907734994, 0.8457189601876893, 0.7768543688055176, 0.815148222140047, 0.8043140043705697, 0.8191135774434515, 0.9247754265118477, 0.7734420388166983, 0.7589174761024491, 0.9518983827639309, 0.8134690735386438, 0.8811535173367011, 0.8449709691010254, 0.8289260497028667, 0.8101251454909628, 0.8024311397772735, 0.7760800410645756, 0.8155794461175675, 0.7863293145205228, 0.8438068232358255, 0.8222718360235208, 0.8531484407303458, 0.8538049234710359, 0.8078840942512984, 0.7553211722557203, 0.8712226675830124, 0.8239985216080155, 0.7138280009372169, 0.7745043822187594, 0.7791828932765221, 0.8232891587414732, 0.8962230874024237, 0.8929399291143176, 0.8462818399086052, 0.8438507684545176, 0.9150981683879922, 0.8899624507166277, 0.8704743117164813, 0.7838587606775544, 0.7818136445660713, 0.8786597268529993, 0.8750554072344504, 0.8142235907050888, 0.807862146647849, 0.7470618784848464, 0.7283516810845119, 0.8194329702458113, 0.8500175501371505, 0.8570456181598467, 0.853568014763256, 0.8075111129238435, 0.8311541636582782, 0.7820891651704518, 0.8081932764254364, 0.8535523160440139, 0.8490727274176209, 0.8900835868371358, 0.7328909462060824, 0.775130608371132, 0.8058645258585675, 0.7978273527530115, 0.8105487905989915, 0.8129852786493834, 0.8473472514371879, 0.8488873162533517, 0.8958943115585732, 0.8233375304167267, 0.833533312693833, 0.8168683614241403, 0.8226234447376657, 0.8377714497108781, 0.8028071242750408, 0.8940753655902838, 0.8022090774415604, 0.8891612977826766, 0.8319022285445852, 0.8233243376077762, 0.8188761988526879, 0.8926914109018343, 0.7614783370204581, 0.7984502083525724, 0.7074639959848537, 0.793033564931036, 0.858430166741345, 0.822514339969464, 0.8646478440529229, 0.7988428635786947, 0.7999845230334797, 0.8457973850086227, 0.7926931991399202, 0.7945484603284144, 0.7971589475203468, 0.7588960734213431, 0.7279072466245372, 0.815737573703061, 0.8744468990529459, 0.8384946538423457, 0.8480524561840024]
    # prep_fidelity_list = [0.578226360617049, 0.5006368845054359, 0.6298523700478481, 0.7842551077683052, 0.6711246987739514, 0.8179179991189145, 0.5492856600288807, 0.5126380897189559, 0.6555663692401461, 0.4879971126090964, 0.596425318013295, 0.5754654031697999, 0.6685321039200978, 0.5998773003066467, 0.5165280472422147, 0.6620584971044576, 0.6379832345886713, 0.6015511168695555, 0.6063269643800668, 0.5511213682556186, 0.652709460744415, 0.7481160052007358, 0.6247278257928148, 0.9012082600844431, 0.6376501744001492, 0.6102826992947596, 0.592104903167559, 0.5445641031152916, 0.7083320715579902, 0.5571430389429688, 0.6851856937037886, 0.5727099657710268, 0.6149781206739046, 0.500047694688, 0.5858523113001346, 0.537004307366433, 0.5717829431867696, 0.6926008608913861, 0.5375612882209657, 0.6072998160909056, 0.39885702295932446, 0.7204232780035393, 0.5884785079521507, 0.35936478712363984, 0.6699429261335688, 0.5385316428558893, 0.6020734889545245, 0.40880535672423257, 0.5521990107308841, 0.6112061239484787, 0.5874579104792528, 0.5344367310586684, 0.5893943693552672, 0.5740070646072155, 0.6093985357242612, 0.4649236119162715, 0.5130768226472453, 0.36654080601120875, 0.7338553931706923, 0.6174971426475062, 0.4286705450192082, 0.49655189358048524, 0.5756882765282121, 0.5935682813138312, 0.5032918804029812, 0.5586533063049255, 0.39148616283068916, 0.6329774209397457, 0.48533679575375166, 0.6233087053341617, 0.495649565951236, 0.6513406954850915, 0.5874416439205359, 0.575005226027764, 0.6080867870163968, 0.6830345821886612, 0.6761367113039404, 0.6653076273407234, 0.44232090885736064, 0.6787083653465718, 0.6258793486072995, 0.5709183027542981, 0.5221395294381384, 0.5333316083656114, 0.6858080691157412, 0.5164907415980422, 0.6476447020853953, 0.5597194050619825, 0.4905833525032971, 0.506468433079031, 0.5933869029892389, 0.6604823260287629, 0.622927705671082, 0.5473679480702274, 0.5524876892037562, 0.61555654707186, 0.5471349229369904, 0.6322433528833087, 0.4563140444007241, 0.4476442652252435, 0.7588880277660591, 0.6311135399580944, 0.6200115617319464, 0.6398170135109658, 0.5489889160423106, 0.6144606510668441, 0.5598037302486933, 0.6902616569148785, 0.5767712475061508, 0.41284187521713467, 0.6539128239235296, 0.5365429023395518, 0.6558789382585, 0.6283835715409263, 0.5404655373209271, 0.505203240169897, 0.5537609126757012, 0.6020071575333885, 0.5990551768270026, 0.5320384169003552, 0.6395124575218185, 0.6750762369892507, 0.7345228303517344, 0.6213744124569947, 0.4920285175376963, 0.38726596283944725, 0.5115944826099825, 0.5041084911843293, 0.5217194782810223, 0.5340622723524207, 0.57142040515225, 0.5045706840183819, 0.6574928651220797, 0.5884932243879892, 0.5774263753900344, 0.6955534861868415, 0.5418088444355555, 0.6974022888697768, 0.5271935963246386, 0.4181809241314066, 0.5130825005476531, 0.5527806294111575, 0.50422373324564, 0.5969485227226697, 0.7568025505183947, 0.568489777927717, 0.7276888255885002, 0.5594627916622495, 0.6479742366003656, 0.550606900184439, 0.726113990161781, 0.6268787173272568, 0.5931315514271635, 0.612085516003226, 0.5202979551401989, 0.5662915740484225, 0.5505550365138294, 0.6239222149049959, 0.5565317007665405, 0.6272968741472384, 0.5768160883406301, 0.6070747525661158, 0.5292737066696616, 0.5783882329220584, 0.5832095421641659, 0.4597463273596599, 0.5381982891746893, 0.605995804492042, 0.4572562085438062, 0.6649850350516111, 0.5975849288296491, 0.5785742440756529, 0.6166566398259141, 0.7939254933958735, 0.6368850697333136, 0.4548604565080383, 0.6133996505494597, 0.40047928744905126, 0.7327690778461895, 0.7388784112290525, 0.5765751690579748, 0.39866212200297824, 0.5346047987434375, 0.48536377155907884, 0.4635554159056994, 0.48735339960034474, 0.6671749987621731, 0.7364280348924364, 0.47268335424170904, 0.7511355632502638, 0.379884697665834, 0.5922596390030914, 0.5614956620734415, 0.6504266464081583, 0.4551143245282875, 0.5973096238029303, 0.35567078560279664, 0.6058338442357107, 0.3737919277506194, 0.5930702759975822, 0.5135223941128892, 0.5113511991117581, 0.5667103536268446, 0.7046724247936897, 0.4881259350536996, 0.3783765539237268, 0.5913599470470865, 0.5814221643138069, 0.6033589853452099, 0.649619246672622, 0.586817266730811, 0.6620985873265148, 0.5110624941823552, 0.6102168728918378, 0.6266074111307718, 0.5989329169171123, 0.567119047219574, 0.5516736202134456, 0.5464670175064499, 0.3637495624801824, 0.39891049810227497, 0.5804624817392701, 0.6375407780419192, 0.5673539836918167, 0.588128959327833, 0.5232753773390374, 0.7497337424339535, 0.5376977314216882, 0.6589737491517136, 0.6642068293611424, 0.5989064019169903, 0.5459103133666345, 0.6125581675275036, 0.6791202502501039, 0.4929282158413122, 0.7154646855410025, 0.5694105123289281, 0.5614387952641184, 0.6613765231602466, 0.5575030329188009, 0.5315844432002947, 0.2796682134207321, 0.5617347805943229, 0.542886641121896, 0.5178172470610263, 0.6856171537160709, 0.41775109654622744, 0.46240595083390656, 0.6242276144207282, 0.5383927425978983, 0.5003304046028434, 0.5719405292304889, 0.5839208551122261, 0.5310141963608976, 0.43468661646119533, 0.5751929692320386, 0.5601422597142184, 0.6365730400096037, 0.5242655565580919, 0.3356276108517141, 0.6586842414473116, 0.6022265508370171, 0.5422897443417948, 0.5572165358812664, 0.6863470940514327, 0.6557456217387725, 0.5494391768743029, 0.5285075879620862, 0.587480777621477, 0.5315221794310849, 0.5329489292088927, 0.4691619845395608, 0.5444338523446265, 0.4513852017763299, 0.6592557982870664, 0.6854672106757522, 0.64834775044958, 0.6147101742536859, 0.6235921218807682, 0.5552009647137984, 0.6530134524347035, 0.51904501718936, 0.5761483452223959, 0.5137637042632336, 0.7064326614159098, 0.4893337694425425, 0.4532026927492875, 0.48443277125596496, 0.4047325573516555, 0.5613596951031163, 0.4686333971782436, 0.4964298053203132, 0.45167337779523975, 0.6496600473929137, 0.4706412189549737, 0.3931497851030338, 0.432723173358479, 0.699263039823968, 0.535681858822733, 0.590594535700178, 0.6133689838395273, 0.7092991817980652, 0.5006799443910087, 0.49231659301132813, 0.652879770259974, 0.6762308951677523, 0.6117362650881336, 0.42576090088807206, 0.5330931977433299, 0.6702287598482086, 0.5969479595836031, 0.6013399097678018, 0.4712367350365533, 0.6821566926516751, 0.6342094697000348, 0.5758792048273587, 0.412370315347086, 0.8310422284091163, 0.349035423299779, 0.6510562937173007, 0.460300620757811, 0.6501958328434501, 0.5776312181445113, 0.4456109669412376, None, 0.4415160472564813, 0.4475323461843522, 0.5214497471813365]
    prep_fidelity_list = [0.6407601329396244, 0.538833877747348, 0.7466120017935529, 0.729950887654123, 0.697352905902533, 0.7376695182921822, 0.6546699635771233, 0.6132468326381302, 0.579808924887143, 0.6999984619912284, 0.6620315893370687, 0.6597404152731849, 0.6652872418179596, 0.572951229915774, 0.5951134263805575, 0.6114952659310944, 0.6911464138516635, 0.5540692991367563, 0.583737523875151, 0.8170498217739275, 0.7386770262649247, 0.722389484386739, 0.7052300676656993, 0.7137140961902765, 0.5763689340177016, 0.7839908307280843, 0.6775603720668653, 0.5527216425975862, 0.5970838592486301, 0.7533939047779763, 0.7014860813863226, 0.7213218052962784, 0.5614863823033583, 0.6216081147215924, 0.4392874017218047, 0.5444882695388847, 0.577717459410563, 0.5777689417335348, 0.5220849875297934, 0.6433241708363584, 0.5488285202974947, 0.42369014487861745, 0.6117968579018744, 0.36824366847676626, 0.6006060669547335, 0.7663491264495194, 0.5615173080058697, 0.5640576487891742, 0.4844007557980231, 0.5861025199594301, 0.6417907027760759, 0.5921768784565269, 0.5520179308098809, 0.6533303434837003, 0.5679942009626251, 0.5895859106982345, 0.7, 0.7656965197170964, 0.6634921119665942, 0.611783426107181, 0.4429426078989367, 0.5298939519242443, 0.7051837269142827, 0.6387103341007624, 0.6930430603632405, 0.4823085678639252, 0.6987292003594459, 0.6482322881549569, 0.5886002411626927, 0.6942211052762463, 0.40918142219770426, 0.6748518439470833, 0.7227576307653494, 0.5008069037873728, 0.7038862248354654, 0.7354059679785112, 0.6529126396824776, 0.6483375456088886, 0.5448445091814911, 0.8150206920753063, 0.6770788333765851, 0.6270857270000706, 0.647406145061295, 0.5382968347841475, 0.7074546513272533, 0.641555141682572, 0.6690243847019317, 0.5990394974997127, 0.6161155439430547, 0.5232520486435814, 0.8163585385156019, 0.7433008204025919, 0.5433570833539891, 0.7, 0.5526199749156968, 0.593999429926944, 0.5336832456732641, 0.6153427008392094, 0.43595637426141653, 0.44414670844291004, 0.6389352431939969, 0.6856977162998811, 0.5863688368918758, 0.7160458705728434, 0.6235887105129726, 0.6705150440050838, 0.7730156892514259, 0.6747036822158731, 0.5490104816637816, 0.3968874092660123, 0.9463528770420643, 0.587004211344306, 0.6887735947946554, 0.6584403099258103, 0.7773346240182575, 0.611820200388959, 0.6851293870056161, 0.518998940466318, 0.5635996148392914, 0.6561382190626939, 0.6279452628560842, 0.6579203136798359, 0.6748042422107434, 0.6731681420889679, 0.4743363931001596, 0.4697428090499034, 0.6146349515908291, 0.6734025670614401, 0.6042906101559419, 0.6749664122903162, 0.5631545260060975, 0.6426720640215954, 0.7, 0.6531186963479778, 0.6588895714145787, 0.6498250120383813, 0.6848316055955831, 0.7405426439968017, 0.6573747986505594, 0.5320081813048763, 0.5200218313310676, 0.5591797873230663, 0.5378191752702794, 0.6443668356303153, 0.656115864484368, 0.6977881154182, 0.6346001345104413, 0.6299223226649175, 0.6353697027463019, 0.49106570920986603, 0.6300454201602531, 0.6472323377480453, 0.6515091326556048, 0.6101227938442129, 0.6427935471680872, 0.692005291575172, 0.6140898185664839, 0.6672551991160236, 0.3903851956658204, 0.69504954021056, 0.6318568667235835, 0.6295995553462752, 0.7099771936975394, 0.5989968212487382, 0.6008050472021178, 0.6376709890239276, 0.5182387050920214, 0.5847385709606442, 0.43851800442312994, 0.7475526459815092, 0.6229051688129418, 0.7867235012861452, 0.6685722011503049, 0.7358378366388513, 0.7559822931830524, 0.47015203529613847, 0.6815444968656943, 0.7040645903262697, 0.576603130521228, 0.6675924508113993, 0.6148237933683376, 0.34576041212573505, 0.5387874026839201, 0.5571052956980729, 0.5468002217306241, 0.5749734511857139, 0.5376236954606632, 0.6051812815149482, 0.5134448504292679, 0.7809197582170688, 0.5037030437819461, 0.6352903502973124, 0.5293707316819296, 0.5589229970026053, 0.5612043688560822, 0.594026365770213, 0.35188237566025427, 0.7399120822893599, 0.3926849029398286, 0.5264758596766845, 0.7680975968579034, 0.5279241219113744, 0.6682564086528049, 0.7840798783665741, 0.5587899262978651, 0.6688910018446126, 0.6374877828975651, 0.542729900233669, 0.7312219317234556, 0.6635552142631784, 0.5779985688384093, 0.5572457479570592, 0.5714119319376247, 0.5897115318667888, 0.6309913451482356, 0.7078084464895129, 0.5908557493388251, 0.6096934209742964, 0.6920440802564993, 0.5327763180866518, 0.5095190021157817, 0.5228810372240021, 0.6592137213111002, 0.6326545836620499, 0.5704272354690394, 0.7680522797187016, 0.6721005226204627, 0.5568200691891765, 0.7532179967105745, 0.5002964283859377, 0.7741235092107822, 0.6675218976812355, 0.6511292684811916, 0.6580503751429292, 0.5429432565511725, 0.6994118539372571, 0.543615171619065, 0.6716229463239642, 0.5189182576183067, 0.5230229269149442, 0.6795235607736613, 0.37609303802325567, 0.5800910416045467, 0.5925428620146602, 0.5574424725119095, 0.6861697930047335, 0.43632073395555326, 0.726431740930428, 0.5888058725888705, 0.4769365290017267, 0.4390841729916787, 0.6128643435721605, 0.674286294239103, 0.5960898578264615, 0.5652236711571212, 0.6042222046081609, 0.679586403280342, 0.48804842043689256, 0.6086931939162232, 0.5018260139569402, 0.6118910599693197, 0.6072435378421215, 0.6442590075526455, 0.6724832143790572, 0.6662994032034222, 0.40707988506536064, 0.4727642507740548, 0.49976556551385587, 0.6366246887866285, 0.5456827811214051, 0.5072981091682227, 0.48863438365828415, 0.6405285950221367, 0.629124080492995, 0.7465126661021009, 0.49255766682293634, 0.5258365164990046, 0.743242640344814, 0.6184614931985257, 0.5638852273267185, 0.6160283294215385, 0.5582778721006247, 0.5665784460021457, 0.6302099231367273, 0.636511231644459, 0.5897696554028605, 0.5022932595589811, 0.4926244711628113, 0.38798267356929517, 0.5656770774479482, 0.7539234671964767, 0.5410036225739419, 0.4384410551215202, 0.6934994294402257, 0.6441454598149815, 0.4202171832167332, 0.5412647395892292, 0.6121825932597593, 0.6427120853740056, 0.7035936130376136, 0.6324776458987109, 0.7050525502484414, 0.5850362171172101, 0.6577418769537399, 0.6916314355950108, 0.7209046699934817, 0.586813682523665, 0.5250139815328914, 0.49999985526788304, 0.6383712930688102, 0.6579288072071785, 0.49071896321015107, 0.3918278780197474, 0.6606808836845484, 0.5828449962339644, 0.5377330852406832, 0.49150958219193863, 0.6709686081652605, 0.4732990908297705, 0.5956282153557184, 0.7440279666747744, 0.66843159105784, 0.5248543510106787, 0.5637105515139142, 0.4197269156995933, 0.4439782185375183, 0.32283042224210545, 0.5657900958430006]


    include_indices = [
        i
        for i, (v1, v2) in enumerate(zip(readout_fidelity_list, prep_fidelity_list))
        if (v1 is not None and v2 is not None)
        and all(isinstance(x, (int, float)) for x in (v1, v2))
        and not (math.isnan(v1) or math.isnan(v2))
        and v1 >= 0.75 and v2 >= 0.45
    ]

    # include_indices = [i for i, val in enumerate(prep_fidelity_list) if val >= 0.4 or val is None]
    # import math
    # include_indices = [
    #     i for i, val in enumerate(prep_fidelity_list)
    #     if (val is None) or (isinstance(val, (int, float)) and not math.isnan(val) and val >= 0.5)
    # ]

    # print(np.sort(list(include_indices)))

    indices = np.sort(list(include_indices))
    print(", ".join(str(i) for i in indices))
    # print("[" + ", ".join(map(str, np.sort(list(include_indices)))) + "]")

    # include_indices = [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 21, 22, 23, 24, 26, 27, 28, 30, 31, 32, 33, 34, 36, 37, 38, 40, 41, 43, 46, 48, 49, 50, 51, 53, 55, 58, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 73, 76, 77, 78, 79, 80, 82, 83, 88, 90, 91, 93, 94, 96, 98, 99, 102, 103, 104, 105, 107, 108, 109, 110, 113, 114, 115, 116, 117, 118, 121, 123, 125, 126, 127, 128]
    # nv_powers = [val for ind, val in enumerate(nv_powers) if ind not in drop_indices]
    # print(len(include_indices))
    # fmt: on
    # filtered_reordered_coords = [filtered_reordered_coords[i] for i in include_indices]
    print(f"len filtered_reordered_coords: {len(filtered_reordered_coords)}")
    # # # select_half_left_side_nvs_and_plot(nv_coordinates_filtered)
    # spot_weights_filtered = np.array(
    #     [weight for i, weight in enumerate(spot_weights) if i in include_indices]
    # )
    # filtered_pol_durs = np.array(
    #     [weight for i, weight in enumerate(pol_durs) if i in include_indices]
    # )
    # print(filtered_pol_durs.tolist())
    # print(len(spot_weights_filtered))
    # sys.exit()
    aom_voltage = 0.2114
    # a, b, c = [3.7e5, 6.97, 8e-14]
    # a, b, c = 161266.751, 6.617, -19.492
    a, b, c = 1.5133e04, 2.6976, -38.63  # UPDATED 2025-09-17

    total_power = a * (aom_voltage) ** b + c
    # print(total_power)
    normalized_spot_weigths = spot_weights / np.sum(spot_weights)
    nv_powers = total_power * normalized_spot_weigths
    # print(nv_powers)
    # print(nv_powers)
    # calcualted_spot_weights = linear_weights(filtered_reordered_counts, alpha=0.3)
    # updated_spot_weights = linear_weights(filtered_reordered_counts, alpha=0.6)
    nv_powers_filtered = np.array(
        [power for i, power in enumerate(nv_powers) if i in include_indices]
    )
    print(nv_powers_filtered)
    # Create a copy or initialize spot weights for modification
    # updated_spot_weights = curve_extreme_weights_simple(
    #     spot_weights, scaling_factor=1.0
    # )
    # filtered_reordered_spot_weights = np.array(
    #     [
    #         weight
    #         for i, weight in enumerate(updated_spot_weights)
    #         if i in include_indices
    #     ]
    # )
    # updated_spot_weights = spot_weights
    # print(filter_and_reorder_nv_coords)
    # updated_spot_weights = np.array(
    #     [w for i, w in enumerate(updated_spot_weights_0) if i in include_indices]
    # )
    # updated_spot_weights = spot_weights
    # updated_spot_weights = curve_extreme_weights_simple(nv_powers)
    # updated_spot_weights = curve_inverse_counts(filtered_reordered_spot_weights)
    # drop_indices = [150, 161, 392, 403]
    # updated_spot_weights = [
    #     val for ind, val in enumerate(updated_spot_weights) if ind not in drop_indices
    # ]
    # filtered_reordered_coords = [
    #     filtered_reordered_coords[ind]
    #     for ind in range(len(filtered_reordered_coords))
    #     if ind not in drop_indices
    # ]
    # nv_powers = [val for ind, val in enumerate(nv_powers) if ind not in drop_indices]

    ### new weithgs for 75 NVs
    # fmt: off
    # spot_weights = [1.5095766644650288, 0.9618852387815993, 1.0430775922714643, 0.4436039796130322, 1.0430775922714643, 1.5095766644650288, 0.30376599435099677, 1.310540492774533, 1.4079312952605532, 0.6747045661156417, 0.4964211566919598, 0.7410295032188732, 1.0430775922714643, 1.0430775922714643, 0.6118852419676627, 0.552486087697023, 0.552486087697023, 0.3939475438077535, 0.7410295032188732, 0.9618852387815993, 0.8845355774031071, 0.3939475438077535, 0.8109450107566616, 1.1281958109476427, 1.5095766644650288, 1.4079312952605532, 1.4079312952605532, 0.552486087697023, 0.4436039796130322, 0.3939475438077535, 1.2173226567254087, 0.7410295032188732, 0.8845355774031071, 0.552486087697023, 1.0430775922714643, 0.4964211566919598, 1.5095766644650288, 1.4079312952605532, 0.6747045661156417, 0.6118852419676627, 1.5095766644650288, 0.6118852419676627, 0.3939475438077535, 1.1281958109476427, 0.8845355774031071, 1.2173226567254087, 1.4079312952605532, 0.6118852419676627, 1.310540492774533, 1.5095766644650288, 1.1281958109476427, 1.310540492774533, 0.7410295032188732, 1.310540492774533, 1.5095766644650288, 0.8845355774031071, 1.5095766644650288, 0.7410295032188732, 0.9618852387815993, 0.3473642711816343, 0.6747045661156417, 0.6747045661156417, 1.310540492774533, 0.6118852419676627, 0.6118852419676627, 1.4079312952605532, 0.3939475438077535, 0.6118852419676627, 1.2173226567254087, 1.4079312952605532, 1.4079312952605532, 0.6747045661156417, 1.310540492774533, 1.0430775922714643, 1.0430775922714643, 1.0430775922714643, 1.4079312952605532, 1.2173226567254087, 1.4079312952605532, 0.3473642711816343, 1.2173226567254087, 0.8109450107566616, 0.9618852387815993, 1.5095766644650288, 1.4079312952605532, 1.2173226567254087, 0.8109450107566616, 1.310540492774533, 0.552486087697023, 1.4079312952605532, 1.0430775922714643, 0.7410295032188732, 0.4964211566919598, 0.7410295032188732, 0.6747045661156417, 1.310540492774533, 0.9618852387815993, 1.5095766644650288, 0.8845355774031071, 0.8109450107566616, 1.310540492774533, 1.4079312952605532, 0.8109450107566616, 1.310540492774533, 1.1281958109476427, 1.4079312952605532, 1.2173226567254087, 0.8845355774031071, 0.7410295032188732, 0.6118852419676627, 1.1281958109476427, 0.8109450107566616, 1.1281958109476427, 0.7410295032188732, 1.1281958109476427, 1.5095766644650288, 0.6118852419676627, 1.5095766644650288, 1.2173226567254087, 0.7410295032188732, 0.6118852419676627, 0.7410295032188732, 1.310540492774533, 1.0430775922714643, 1.4079312952605532, 0.7410295032188732, 1.2173226567254087, 1.5095766644650288, 1.310540492774533, 0.9618852387815993, 1.310540492774533, 0.6747045661156417, 0.7410295032188732, 1.0430775922714643, 1.4079312952605532, 0.6747045661156417, 0.3939475438077535, 0.6118852419676627, 0.7410295032188732, 1.310540492774533, 1.5095766644650288, 1.2173226567254087, 1.2173226567254087, 0.9618852387815993, 0.6747045661156417, 1.2173226567254087, 1.2173226567254087, 0.4964211566919598, 1.2173226567254087, 0.6118852419676627, 0.8109450107566616, 1.0430775922714643, 1.4079312952605532, 0.3939475438077535, 0.7410295032188732, 1.4079312952605532, 0.9618852387815993, 1.310540492774533, 1.1281958109476427, 1.4079312952605532, 1.5095766644650288, 1.0430775922714643, 0.7410295032188732, 1.4079312952605532, 1.5095766644650288, 1.4079312952605532, 1.4079312952605532, 0.552486087697023, 0.3939475438077535, 0.8845355774031071, 0.552486087697023, 0.6118852419676627, 0.6747045661156417, 0.6747045661156417, 0.552486087697023, 1.4079312952605532, 1.5095766644650288, 1.4079312952605532, 1.1281958109476427, 0.8109450107566616, 0.8845355774031071, 1.1281958109476427, 0.9618852387815993, 1.1281958109476427, 1.0430775922714643, 1.310540492774533, 0.6747045661156417, 1.0430775922714643, 1.5095766644650288, 1.2173226567254087, 1.4079312952605532, 1.1281958109476427, 1.0430775922714643, 0.9618852387815993, 0.8109450107566616, 0.552486087697023, 0.30376599435099677, 1.310540492774533, 0.4964211566919598, 0.6118852419676627, 0.7410295032188732, 0.7410295032188732, 1.2173226567254087, 0.8845355774031071, 0.8109450107566616, 1.5095766644650288, 0.8845355774031071, 0.9618852387815993, 1.2173226567254087, 1.2173226567254087, 1.1281958109476427, 0.8109450107566616, 0.552486087697023, 1.2173226567254087, 1.2173226567254087, 0.9618852387815993, 0.6118852419676627, 1.310540492774533, 0.9618852387815993, 1.4079312952605532, 0.8109450107566616, 0.6118852419676627, 0.8109450107566616, 1.4079312952605532, 0.7410295032188732, 1.2173226567254087, 1.310540492774533, 0.7410295032188732, 0.4436039796130322, 1.0430775922714643, 1.5095766644650288, 1.1281958109476427, 0.8109450107566616, 0.8109450107566616, 0.7410295032188732, 1.0430775922714643, 1.310540492774533, 1.2173226567254087, 0.8109450107566616, 0.7410295032188732, 1.4079312952605532, 1.4079312952605532, 1.2173226567254087, 0.4964211566919598, 1.4079312952605532, 0.9618852387815993, 1.5095766644650288, 1.2173226567254087, 0.6118852419676627, 1.0430775922714643, 0.7410295032188732, 0.9618852387815993, 0.6118852419676627, 0.4964211566919598, 1.5095766644650288, 0.8845355774031071, 1.1281958109476427, 1.4079312952605532, 0.9618852387815993, 0.6747045661156417, 1.310540492774533, 0.8845355774031071, 0.4436039796130322, 1.2173226567254087, 0.6747045661156417, 0.3939475438077535, 0.6118852419676627, 0.9618852387815993, 0.6747045661156417, 0.7410295032188732, 1.4079312952605532, 0.8845355774031071, 0.7410295032188732, 0.9618852387815993, 1.1281958109476427, 1.2173226567254087, 0.8845355774031071, 0.7410295032188732, 0.552486087697023, 1.1281958109476427, 1.1281958109476427, 1.4079312952605532, 1.0430775922714643, 0.8845355774031071, 0.552486087697023, 0.8109450107566616, 0.6747045661156417, 1.5095766644650288, 1.310540492774533, 1.1281958109476427, 0.8109450107566616, 1.2173226567254087, 1.0430775922714643, 1.2173226567254087, 0.7410295032188732, 1.4079312952605532, 1.5095766644650288, 1.0430775922714643, 1.1281958109476427, 1.4079312952605532, 1.310540492774533, 0.9618852387815993, 1.4079312952605532, 1.5095766644650288, 0.6118852419676627, 0.8109450107566616, 1.5095766644650288, 1.310540492774533, 0.6747045661156417, 1.310540492774533, 0.552486087697023, 1.1281958109476427, 1.5095766644650288, 0.6747045661156417, 0.9618852387815993, 0.6747045661156417, 1.310540492774533, 0.8845355774031071, 1.4079312952605532, 0.6118852419676627, 1.2173226567254087, 0.8109450107566616, 0.552486087697023, 1.5095766644650288, 0.6747045661156417, 0.7410295032188732, 1.310540492774533, 0.6118852419676627, 0.4436039796130322, 1.310540492774533, 0.9618852387815993, 1.2173226567254087, 1.310540492774533, 1.310540492774533, 1.310540492774533, 1.310540492774533, 1.310540492774533, 0.7410295032188732, 0.9618852387815993, 1.4079312952605532, 1.310540492774533, 0.8845355774031071, 0.9618852387815993, 0.8845355774031071, 1.4079312952605532, 0.4964211566919598, 1.0430775922714643, 1.4079312952605532, 0.6747045661156417, 0.7410295032188732, 0.7410295032188732, 1.2173226567254087, 1.2173226567254087, 0.552486087697023, 1.310540492774533, 0.7410295032188732, 1.4079312952605532, 1.0430775922714643, 0.6118852419676627, 1.310540492774533, 0.8109450107566616, 1.5095766644650288, 0.3939475438077535, 0.8845355774031071, 0.9618852387815993, 0.8109450107566616, 0.8845355774031071, 1.1281958109476427, 1.4079312952605532, 0.8109450107566616] 
    #fmt: off
    # spot_weights_med = np.median(spot_weights)
    # spot_weights = [spot_weights_med if spot_weights[ind] > 3 else spot_weights[ind] for ind in range(len(spot_weights))]
    updated_spot_weights = curve_extreme_weights_simple(
        spot_weights_filtered, scaling_factor=1.0
    )
    # Update weights for the specified indices using the calculated weights
    # fmt: off
    # selected_indices_68MHz = [0, 7, 8, 9, 11, 14, 18, 22, 24, 25, 26, 27, 28, 30, 31, 32, 33, 35, 38, 44, 45, 46, 47, 48, 49, 53, 55, 57, 58, 60, 62, 64, 66, 67, 68, 69, 70, 71, 72, 73]
    # selected_indices_185MHz  =[0, 1, 2, 3, 4, 5, 6, 10, 12, 13, 15, 16, 17, 19, 20, 21, 23, 29, 34, 36, 39, 40, 41, 42, 43, 50, 51, 52, 54, 56, 59, 61, 63, 65, 74]
    # selected_indices = selected_indices_185MHz
    # fmt: on
    # updated_spot_weights = [
    #     val for ind, val in enumerate(updated_spot_weights) if ind in selected_indices
    # ]
    # filtered_reordered_coords = [
    #     filtered_reordered_coords[ind]
    #     for ind in range(len(filtered_reordered_coords))
    #     if ind in selected_indices
    # ]
    # nv_powers = [val for ind, val in enumerate(nv_powers) if ind in selected_indices]

    ####
    filtered_total_power = np.sum(nv_powers_filtered)
    print(total_power)
    adjusted_aom_voltage = ((filtered_total_power - c) / a) ** (1 / b)
    print("Adjusted Voltages (V):", adjusted_aom_voltage)
    # sys.exit()

    filtered_reordered_spot_weights = updated_spot_weights
    print("filtered_reordered_spot_weights_len:", len(filtered_reordered_spot_weights))
    print("filtered_reordered_coords_len:", len(filtered_reordered_coords))
    print("filtered_nv_power_len:", len(nv_powers_filtered))
    print("NV Index | Coords    |   previous weights")
    print("-" * 60)
    for idx, (coords, weight) in enumerate(
        zip(filtered_reordered_coords, filtered_reordered_spot_weights)
    ):
        print(f"{idx + 1:<8} | {coords} | {weight:.3f}")

    print(adjusted_aom_voltage)

    # print(np.max(filtered_reordered_spot_weights))
    # print(np.median(filter_and_reorder_nv_coords))
    # sys.exit()
    # print(len(spot_weights))
    # updated_spot_weights = filtered_reordered_counts
    # spot_weights = updated_spot_weights
    # spot_weights = linear_weights(filtered_reordered_counts, alpha=0.9)
    # spot_weights = non_linear_weights_adjusted(
    #     filtered_intensities, alpha=0.9, beta=0.3, threshold=0.9
    # )
    # spot_weights = sigmoid_weights(filtered_intensities, threshold=0, beta=0.005)
    # Print some diagnostics
    # Update spot weights for NVs with low fidelity

    # Calculate the spot weights based on the integrated intensities
    # spot_weights = non_linear_weights(filtered_intensities, alpha=0.9)

    # Save the filtered results
    save_results(
        filtered_reordered_coords,
        filtered_reordered_spot_weights,
        filename="slmsuite/nv_blob_detection/nv_blob_308nvs_reordered.npz",
    )

    # # Plot the original image with circles around each NV

    fig, ax = plt.subplots()
    title = "12ms, INTI_520_Combined_Image"
    kpl.imshow(ax, img_array, title=title, cbar_label="Photons")
    # Draw circles and index numbers
    for idx, coord in enumerate(filtered_reordered_coords):
        circ = plt.Circle(coord, sigma, color="lightblue", fill=False, linewidth=0.5)
        ax.add_patch(circ)
        # Place text just above the circle
        ax.text(
            coord[0],
            coord[1] - sigma - 1,
            str(idx),
            color="white",
            fontsize=8,
            ha="center",
        )

    plt.show(block=True)
