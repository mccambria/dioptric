import numpy as np

# Path for saving and loading the data
path = "slmsuite/nv_blob_detection"
readout_fidelity_list = [
    0.9593123562892327,
    0.9613957241152131,
    0.9817100542105408,
    0.9836156854650859,
    0.7275559840121265,
    0.9227854270495,
    0.9949817925008498,
    0.9012188807618704,
    0.9823152140982949,
    0.9568588883807947,
    0.9680735822611224,
    0.986962808428375,
    0.9146489319742821,
    0.9461550605817435,
    0.969106979612446,
    0.9496979879111835,
    0.9772423434602113,
    0.885581484783919,
    0.9931013474204142,
    0.9165557542084218,
    0.978371217738236,
    0.9872548272539857,
    0.9884015890006038,
    0.8753604647719144,
    0.8468325468613853,
    0.9664016235250201,
    0.9691847916683985,
    0.644043668174199,
    0.9214731838934132,
    0.9515091101719795,
    0.8572307847990444,
    0.9416686997440347,
    0.9447840262114398,
    0.9153362261695879,
    0.7749127403597468,
    0.9701724258369296,
    0.9558094648732096,
    0.95864907688303,
    0.9452152054615193,
    0.9100760343670307,
    0.980037148560128,
    0.5,
    0.9392271667467386,
    0.9164866801886619,
    0.9602897290966019,
    0.6828520357095411,
    0.9575238469158522,
    0.9860357421600254,
    0.967352631905928,
    0.8742601643453225,
    0.864098674434085,
    0.9310472302393056,
    0.8666627340056965,
    0.9900584105906856,
    0.9760001559248551,
    0.7130693912117807,
    0.9642314113171917,
    0.9186586605114775,
    0.8333903391905528,
    0.9632561162630118,
    0.9608677671740371,
    0.9194678861899271,
    0.9322273203502456,
    0.9739286570847352,
    0.9714005849918812,
    0.94507904507446,
    0.9409444887831944,
    0.8607556291746572,
    0.9390294178615345,
    0.9436110307097443,
    0.9760997033110999,
    0.9922147467888474,
    0.9286835459725975,
    0.969200770536276,
    0.9540221620036136,
    0.9679304204883422,
    0.9047775246895146,
    0.9284254485197224,
    0.9337455966141668,
    0.8723970422683789,
    0.9536415534011004,
    0.8220699403565284,
    0.7507725365998297,
    0.9606273365061935,
    0.9713627877752484,
    0.877475519833737,
    0.9777342486388404,
    0.9442896530825255,
    0.9386687799821258,
    0.931514083186217,
    0.917453140230706,
    0.9752393296428286,
    0.9746770044431187,
    0.933411987143444,
    0.9794696658433162,
    0.9113378155956967,
    0.9432061720920418,
    0.9493304357005623,
    0.9379460886910462,
    0.9523588426787202,
    0.9016969381140877,
    0.9362431647620022,
    0.98778504717058,
    0.9876849478183378,
    0.9786823318002313,
    0.9597360237288417,
    0.957660080359424,
    0.9694853554883084,
    0.9891069441436822,
    0.9119287320426865,
    0.865694248946038,
    0.9917991822938269,
    0.9735095855104425,
    0.8848624576898847,
    0.9493274308449247,
    0.7458611489634954,
    0.8260063755686518,
    0.7445181368662104,
    0.9560051771581579,
    0.7892839432822297,
    0.9116466986782785,
    0.9697833804990461,
    0.9302033746217466,
    0.921363972070186,
    0.955171286385657,
    0.9399476618513622,
    0.9384163429030317,
    0.988744502687565,
    0.8781683047111615,
    0.9696407009682856,
    0.6423034347752721,
    0.9082419545729188,
    0.9701381826121598,
    0.9781256439055919,
    0.8519574812175617,
    0.981842695972442,
    0.9832229553119695,
    0.9416448542077546,
    0.9177597051038333,
    0.878858400694989,
    0.9413774117110225,
    0.9880462279373039,
    0.941131780620575,
    0.9120767317665466,
    0.8932693129919377,
    0.8577498238267954,
    0.9934229415269438,
    0.9269512952070776,
    0.9542929136857579,
    0.7912493374540921,
    0.9366908396481508,
    0.9509169029348288,
    0.9781351646021607,
    0.9899447902847477,
    0.9655763707434418,
    0.9265580226272407,
    0.9121387014011818,
    0.9641262442759073,
    0.9914147932295663,
    0.9615369187795875,
]
prep_fidelity_list = [
    0.7180323329989053,
    0.6933606084216175,
    0.5016950601556683,
    0.6748606542812309,
    0.4536897614971923,
    0.7299233717156691,
    0.544494666572896,
    0.7342214145047155,
    0.6208299526827004,
    0.6363302619366346,
    0.6697205773102719,
    0.6406861313769477,
    0.7690361547009789,
    0.6036528013977573,
    0.7025319363788065,
    0.714607713879363,
    0.6812002726507171,
    0.7574043845332179,
    0.5754679597583932,
    0.6421696287153665,
    0.6518979810378334,
    0.6374942070226204,
    0.6814894825078438,
    0.7204257676414287,
    0.6992163326435585,
    0.6597258867838749,
    0.6788848388603497,
    0.5162894050972237,
    0.6387617325786286,
    0.6974365853803308,
    0.6014741035638863,
    0.6687240134788288,
    0.6618997887686995,
    0.6952432781937534,
    0.6083234615916215,
    0.6860888395773048,
    0.683881596432087,
    0.7063612001218449,
    0.7119399348472917,
    0.7234699100292645,
    0.6648106787141398,
    0.7960187454792332,
    0.656144049574642,
    0.7195313619539472,
    0.700326712216496,
    0.3210682095742795,
    0.7026638063114945,
    0.6415205723743242,
    0.6368137236981009,
    0.6970208967362597,
    0.7648794634591113,
    0.6910818020954016,
    0.6894290323524406,
    0.6259975598757943,
    0.6395366998974336,
    0.6654509707251051,
    0.6476191824436487,
    0.7172229109815285,
    0.685258897041804,
    0.6738239439616336,
    0.5089353541333185,
    0.3987104363435221,
    0.6855077770555122,
    0.6596288052357433,
    0.6469817569518979,
    0.6616156525631162,
    0.6159369233710574,
    0.5462712457553538,
    0.6350901634355122,
    0.5938562204856686,
    0.6625291228946011,
    0.5483594821569857,
    0.7410911037139853,
    0.7058564198547462,
    0.6855718539536511,
    0.6141695063624797,
    0.687407985790935,
    0.6807475851634912,
    0.6457266778288775,
    0.7596357742853229,
    0.6894932799763867,
    0.7169064684904675,
    0.7147089049206392,
    0.6313630880337293,
    0.5978172425712286,
    0.6969376888178739,
    0.6691149958188003,
    0.6268559821655644,
    0.6836566014267285,
    0.6282562604638506,
    0.7286593240645969,
    0.6400305466479492,
    0.6691061135050616,
    0.6627349419981268,
    0.6938897832836363,
    0.74390548469014,
    0.6648323894693764,
    0.7104783625061271,
    0.6817247296972747,
    0.5908916820385605,
    0.7451238237704851,
    0.721018017943968,
    0.567738677721694,
    0.5776383057065289,
    0.6826228686505209,
    0.6768940228025107,
    0.6939357453827055,
    0.6321486728382363,
    0.5861795484635142,
    0.6309950680471923,
    0.6967967983622442,
    0.5705985695379281,
    0.6497694964233302,
    0.8092245543188804,
    0.6584696860638636,
    0.7136757005596059,
    0.7509653573880257,
    0.6006861042010159,
    0.7112891875288078,
    0.6893289399732369,
    0.6496827537472729,
    0.723505938574766,
    0.7393135698664225,
    0.6089922257137276,
    0.6785236129470993,
    0.6610617123691402,
    0.671108870512973,
    0.6495126985466256,
    0.7458527904025429,
    0.4504767320783586,
    0.03367849746295637,
    0.6486175484724006,
    0.6563242049945696,
    0.37305628722662454,
    0.7220541307413274,
    0.3538869028156256,
    0.5862516332178133,
    0.702211840740502,
    0.5497742465265143,
    0.7011631063078807,
    0.745295914890258,
    0.61232941976202,
    0.6510206447567723,
    0.6531933161196535,
    0.7300361034063813,
    0.7008221341728134,
    0.6471288500629898,
    0.6852555696679954,
    0.29223170718885216,
    0.660262076229025,
    0.5144075957883081,
    0.7274635556409379,
    0.67321359743493,
    0.6662133855851934,
    0.7464661694263381,
    0.3908401401577376,
    0.7547109471120552,
    0.6309562731538578,
    0.2742905441993807,
    0.5030476943672376,
]
# Save the combined coordinates to a new file
# np.savez(
#     f"{path}/threhold_list_nvs_{len(threshold)}.npz",
#     threshold,
# )
# Example lists
nv_indices = list(
    range(len(readout_fidelity_list))
)  # Assuming NV indices match the list indices

# Find indices where either condition is met
low_fidelity_nv_indices = [
    idx for idx in nv_indices if readout_fidelity_list[idx] < 0.73
]
# low_fidelity_nv_indices = [idx for idx in nv_indices if prep_fidelity_list[idx] < 0.6]

# Print the results
print("NV indices with fidelity:", low_fidelity_nv_indices)


# Function to load NV coordinates and spot weights
# def load_nv_coords(
#     file_path="slmsuite/nv_blob_detection/nv_blob_filtered_160nvs_reordered.npz",
# ):
#     data = np.load(file_path, allow_pickle=True)
#     nv_coordinates = data["nv_coordinates"]
#     spot_weights = data["updated_spot_weights"]  # Use updated spot weights
#     return nv_coordinates, spot_weights


# Sigmoid function for smoothing
# def sigmoid(x):
#     return 1 / (1 + np.exp(-x))


# Load NV coordinates and spot weights
# nuvu_pixel_coords, spot_weights = load_nv_coords()

# Smoothed spot weights
# smoothed_spot_weights = sigmoid(spot_weights - np.median(spot_weights))


# Print NV indices, coordinates, and spot weights
# print("NVs with low fidelity:")
# for idx in low_fidelity_nv_indices:
#     print(
#         f"Index: {idx}, Coordinates: {nuvu_pixel_coords[idx]}, "
#         f"Spot Weight: {spot_weights[idx]:.4f}, Smoothed Weight: {smoothed_spot_weights[idx]:.4f}"
#     )
