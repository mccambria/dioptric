# -*- coding: utf-8 -*-
"""
Optimize SCC parameters

Created on December 6th, 2023

@author: mccambria
"""

import traceback

import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
from mpl_toolkits.mplot3d import Axes3D
from scipy.ndimage import gaussian_filter
from scipy.optimize import curve_fit

from majorroutines.widefield import base_routine
from utils import data_manager as dm
from utils import kplotlib as kpl
from utils import tool_belt as tb
from utils import widefield as widefield
from utils.constants import NVSig, VirtualLaserKey


def process_and_plot(data):
    """
    Process and save average counts and standard errors for the SCC optimization experiment.

    Parameters
    ----------
    data : dict
        Dictionary containing experiment data.
    selected_orientations : list
        List of selected orientations (e.g., ["0.041", "0.147"]).

    Returns
    -------
    processed_data : dict
        Processed data for further analysis.
    figs : list
        List of matplotlib figures generated during plotting.
    """
    # Parse input data
    nv_list = data["nv_list"]
    num_nv = len(nv_list)
    counts = np.array(data["counts"])
    sig_counts = counts[0]
    ref_counts = counts[1]
    step_vals = np.array(data["step_vals"])
    duration_vals = np.unique(step_vals[:, 0])
    amp_vals = np.unique(step_vals[:, 1])

    # Filter NVs by selected orientations
    # orientation_data = dm.get_raw_data(file_id=1723161184641)
    # orientation_indices = orientation_data["orientation_indices"]
    # selected_orientations = ["0.041", "0.147"]
    # selected_indices = []
    # for orientation in selected_orientations:
    #     if str(orientation) in orientation_indices:
    #         selected_indices.extend(orientation_indices[str(orientation)]["nv_indices"])
    # selected_indices = list(set(selected_indices))  # Remove duplicates

    # Filter counts and NV listv
    selected_indices = range(num_nv)
    nv_list = [nv_list[i] for i in selected_indices]
    sig_counts = sig_counts[selected_indices, :, :, :]
    ref_counts = ref_counts[selected_indices, :, :, :]
    # Filter counts and NV list
    sig_counts, ref_counts = widefield.threshold_counts(
        nv_list, sig_counts, ref_counts, dynamic_thresh=True
    )
    # Standard errors for signal and reference counts
    avg_counts, avg_counts_ste, norms = widefield.average_counts(sig_counts, ref_counts)
    avg_snr, avg_snr_ste = widefield.calc_snr(sig_counts, ref_counts)
    # Reshape data into 2D grids
    num_dur_steps = len(duration_vals)
    num_amp_steps = len(amp_vals)
    avg_counts_grid = avg_counts.reshape(
        len(selected_indices), num_dur_steps, num_amp_steps
    )
    avg_counts_ste_grid = avg_counts_ste.reshape(
        len(selected_indices), num_dur_steps, num_amp_steps
    )
    avg_snr_grid = avg_snr.reshape(len(selected_indices), num_dur_steps, num_amp_steps)
    avg_snr_ste_grid = avg_snr_ste.reshape(
        len(selected_indices), num_dur_steps, num_amp_steps
    )

    # Save all processed data
    processed_data = {
        "nv_list": nv_list,
        "step_vals": step_vals,
        "avg_counts_grid": avg_counts_grid,
        "norms ": norms,
        "avg_counts_ste_grid": avg_counts_ste_grid,
        "avg_snr_grid": avg_snr_grid,
        "avg_snr_ste_grid": avg_snr_ste_grid,
        "amp_vals": amp_vals,
        "duration_vals": duration_vals,
    }

    # # Save data to a file
    # timestamp = dm.get_time_stamp()
    # file_name = dm.get_file_name(file_id=1723161184641)
    # file_path = dm.get_file_path(__file__, timestamp, f"{file_name}_processed")
    # dm.save_raw_data(processed_data, file_path)
    # print(f"Processed data saved to: {file_path}")

    # Visualization (optional)
    # figs = []
    # for nv_idx, snr_2d in enumerate(avg_snr_grid):
    #     fig, ax = plt.subplots()
    #     cax = ax.imshow(
    #         snr_2d,
    #         extent=(
    #             amp_vals.min(),
    #             amp_vals.max(),
    #             duration_vals.min(),
    #             duration_vals.max(),
    #         ),
    #         aspect="auto",
    #         cmap="viridis",
    #     )
    #     ax.set_title(f"NV {nv_idx} - SNR Heatmap")
    #     ax.set_xlabel("Amplitude")
    #     ax.set_ylabel("Duration")
    #     fig.colorbar(cax, label="SNR")
    #     plt.show()
    #     figs.append(fig)
    # Individual NV SNR fitting
    optimal_durations = []
    optimal_amplitudes = []
    red_chi_sqs = []
    optimal_snrs = []
    for nv_ind, nv_snr_grid in enumerate(avg_snr_grid):
        nv_snr_grid = np.array(nv_snr_grid)
        nv_snr_ste_grid = np.array(avg_snr_ste_grid[nv_ind])
        popt, red_chi_sq, fit_fn, optimal_values = fit_2d_snr(
            duration_vals, amp_vals, nv_snr_grid, nv_snr_ste_grid
        )
        optimal_duration, optimal_amplitude = optimal_values
        optimal_snr = fit_fn(optimal_duration, optimal_amplitude)
        optimal_durations.append(optimal_duration)
        optimal_amplitudes.append(optimal_amplitude)
        red_chi_sqs.append(red_chi_sq)
        optimal_snrs.append(optimal_snr)
        print(
            f"NV {nv_ind}: snr: {optimal_snr:.2f} (dur,amp): ({optimal_values[0]:.0f}, {optimal_values[1]:.3f}), red chi: {red_chi_sq:.3f}"
        )
    return processed_data


def fit_2d_snr(duration_vals, amp_vals, snr_grid, snr_ste_grid):
    """
    Perform 2D fitting on SNR data over duration and amplitude, including uncertainties.

    """
    x, y = np.meshgrid(duration_vals, amp_vals, indexing="ij")
    x_flat = x.flatten()
    y_flat = y.flatten()
    z_flat = snr_grid.flatten()
    sigma_flat = snr_ste_grid.flatten()  # Standard errors

    # # Define the 2D SNR fit function
    def snr_fit_fn(xy, A, x_delay, y_delay, tau_x, tau_y):
        x, y = xy
        x_shifted = x - x_delay
        y_shifted = y - y_delay
        return (
            A * x_shifted * y_shifted * np.exp(-x_shifted / tau_x - y_shifted / tau_y)
        )

    # Initial guesses for parameters
    guess_params = [
        np.max(snr_grid),  # Amplitude (A)
        duration_vals[0],  # x_delay (duration delay)
        amp_vals[0],  # y_delay (amplitude delay)
        duration_vals[-1],  # tau_x (duration decay)
        amp_vals[-1],  # tau_y (amplitude decay)
    ]

    try:
        popt, pcov = curve_fit(
            snr_fit_fn,
            (x_flat, y_flat),
            z_flat,
            p0=guess_params,
            sigma=sigma_flat,
            absolute_sigma=True,
            maxfev=20000,
            # bounds=bounds,
        )

        # Calculate residuals and reduced chi-squared
        fit_vals = snr_fit_fn((x_flat, y_flat), *popt)
        residuals = z_flat - fit_vals
        dof = len(z_flat) - len(popt)  # Degrees of freedom
        red_chi_sq = np.sum((residuals / sigma_flat) ** 2) / dof  # Reduced chi-squared

    except Exception as e:
        print(f"2D fitting failed: {e}")
        popt = guess_params
        pcov = np.zeros((len(guess_params), len(guess_params)))  # Default covariance
        red_chi_sq = np.inf

    # Define the fitted 2D function
    def fit_fn(x, y):
        return snr_fit_fn((x, y), *popt)

    # Compute optimal duration and amplitude
    x_lin = np.linspace(duration_vals.min(), duration_vals.max(), 100)
    y_lin = np.linspace(amp_vals.min(), amp_vals.max(), 100)
    x_mesh, y_mesh = np.meshgrid(x_lin, y_lin, indexing="ij")
    snr_fit_surface = fit_fn(x_mesh, y_mesh)
    optimal_idx = np.unravel_index(np.argmax(snr_fit_surface), snr_fit_surface.shape)
    optimal_duration = x_lin[optimal_idx[0]]
    optimal_amplitude = y_lin[optimal_idx[1]]

    return popt, red_chi_sq, fit_fn, (optimal_duration, optimal_amplitude)


def analyze_and_visualize(processed_data):
    """
    Perform additional analysis and generate advanced visualizations.

    """
    # Extract data from the dictionary
    nv_list = processed_data["nv_list"]
    step_vals = processed_data["step_vals"]
    avg_counts_grid = processed_data["avg_counts_grid"]
    avg_counts_ste_grid = processed_data["avg_counts_ste_grid"]
    avg_snr_grid = processed_data["avg_snr_grid"]
    avg_snr_ste_grid = processed_data["avg_snr_ste_grid"]
    amp_vals = np.array(processed_data["amp_vals"])
    duration_vals = np.array(processed_data["duration_vals"])
    # Compute the median SNR across NVs
    median_snr_grid = np.median(avg_snr_grid, axis=0)
    median_snr_grid_ste = np.median(avg_snr_ste_grid, axis=0)
    # median_snr_grid_ste *= np.sqrt(400)

    # Perform 2D fitting
    popt, red_chi_sq, fit_fn, optimal_values = fit_2d_snr(
        duration_vals, amp_vals, median_snr_grid, median_snr_grid_ste
    )
    # Extract optimal values
    optimal_duration, optimal_amplitude = optimal_values
    print(f"Optimal SCC Duration: {optimal_duration:.2f} ns")
    print(f"Optimal SCC Amplitude: {optimal_amplitude:.2f}")
    print(f"Reduced Chi-Squared: {red_chi_sq:.2f}")

    # Visualize the 2D fit and experimental data
    fig = plt.figure(figsize=(8, 6))
    ax = fig.add_subplot(111, projection="3d")
    # Plot experimental SNR grid
    X, Y = np.meshgrid(duration_vals, amp_vals, indexing="ij")
    ax.scatter(X, Y, median_snr_grid, color="r", label="Experimental Data", alpha=0.6)
    # Plot fitted surface
    X_fit = np.linspace(duration_vals.min(), duration_vals.max(), 100)
    Y_fit = np.linspace(amp_vals.min(), amp_vals.max(), 100)
    X_fit_mesh, Y_fit_mesh = np.meshgrid(X_fit, Y_fit, indexing="ij")
    Z_fit = fit_fn(X_fit_mesh, Y_fit_mesh)

    # Mark the optimal values
    optimal_snr = fit_fn(optimal_duration, optimal_amplitude)

    ax.scatter(
        optimal_duration,
        optimal_amplitude,
        optimal_snr,
        color="blue",
        label=f"Optimal (Dur: {optimal_duration:.0f} ns, Amp: {optimal_amplitude:.3f})",
        s=60,
        edgecolors="black",
        # zorder=10,
    )
    ax.plot_surface(X_fit_mesh, Y_fit_mesh, Z_fit, cmap="viridis", alpha=0.6)

    # Add text for reduced chi-squared
    ax.text2D(
        0.05,
        0.95,
        f"Reduced Chi-Squared: {red_chi_sq:.3f}",
        transform=ax.transAxes,
        fontsize=10,
        color="blue",
    )

    # Set tight axes
    ax.set_xlim(duration_vals.min(), duration_vals.max())
    ax.set_ylim(amp_vals.min(), amp_vals.max())
    ax.set_zlim(median_snr_grid.min(), median_snr_grid.max())
    ax.set_box_aspect([1, 1, 0.8])  # Proportionally scale axes
    # Customize titles and labels
    ax.set_title("Fit of Median SCC SNR Grid", fontsize=14)
    ax.set_xlabel("Duration (ns)", fontsize=12)
    ax.set_ylabel("Amplitude", fontsize=12)
    ax.set_zlabel("SNR", fontsize=12)
    ax.tick_params(axis="x", labelsize=10)
    ax.tick_params(axis="y", labelsize=10)
    ax.tick_params(axis="z", labelsize=10)
    ax.legend(fontsize=10, loc="best")
    plt.tight_layout()
    plt.show()

    # Plot the heatmap for the median SNR
    # fig, ax = plt.subplots()
    # cax = ax.imshow(
    #     median_snr_grid,
    #     extent=(
    #         amp_vals.min(),
    #         amp_vals.max(),
    #         duration_vals.min(),
    #         duration_vals.max(),
    #     ),
    #     aspect="auto",
    #     cmap="coolwarm",
    #     origin="lower",
    # )
    # ax.set_title("Median SCC SNR Across NVs")
    # ax.set_xlabel("SCC Amplitude")
    # ax.set_ylabel("SCC Duration (ns)")
    # fig.colorbar(cax, label="Median SCC SNR")
    # plt.show()

    # Individual NV SNR fitting
    optimal_durations = []
    optimal_amplitudes = []
    red_chi_sqs = []
    optimal_snrs = []
    for nv_ind, nv_snr_grid in enumerate(avg_snr_grid):
        nv_snr_grid = np.array(nv_snr_grid)
        nv_snr_ste_grid = np.array(avg_snr_ste_grid[nv_ind])
        popt, red_chi_sq, fit_fn, optimal_values = fit_2d_snr(
            duration_vals, amp_vals, nv_snr_grid, nv_snr_ste_grid
        )
        optimal_duration, optimal_amplitude = optimal_values
        optimal_snr = fit_fn(optimal_duration, optimal_amplitude)
        optimal_durations.append(optimal_duration)
        optimal_amplitudes.append(optimal_amplitude)
        red_chi_sqs.append(red_chi_sq)
        optimal_snrs.append(optimal_snr)
        print(
            f"NV {nv_ind}: snr: {optimal_snr:.2f} (dur,amp): ({optimal_values[0]:.0f}, {optimal_values[1]:.3f}), red chi: {red_chi_sq:.3f}"
        )
        # Scatter plot for optimal durations vs. optimal amplitudes
    plt.figure(figsize=(6.5, 5))
    plt.scatter(
        optimal_durations,
        optimal_amplitudes,
        c=red_chi_sqs,
        cmap="viridis",
        s=40,
        edgecolors="black",
    )
    for i, (x, y) in enumerate(zip(optimal_durations, optimal_amplitudes)):
        optimal_snr = optimal_snrs[i]
        plt.annotate(f"{optimal_snr:.2f}", (x, y), fontsize=6, alpha=0.6, color="red")
    colorbar = plt.colorbar(label="Reduced Chi-Squared")
    colorbar.ax.tick_params(labelsize=12)
    colorbar.set_label("Reduced Chi-Squared", fontsize=12)
    plt.xlabel("Optimal Duration (ns)", fontsize=12)
    plt.ylabel("Optimal Amplitude", fontsize=12)
    plt.title("Optimal SCC Parameters Across NVs", fontsize=14)
    plt.grid(alpha=0.3)
    plt.xticks(fontsize=12)
    plt.yticks(fontsize=12)
    plt.show()


# # Plot Median SNR vs. SCC Amplitude for each duration
# fig1, ax1 = plt.subplots()
# for i, duration in enumerate(duration_vals):
#     ax1.plot(amp_vals, median_snr_grid[i, :], label=f"{duration}", marker="o")
# ax1.set_xlabel("SCC Amplitude")
# ax1.set_ylabel("Median SCC SNR")
# ax1.set_title("Median SCC SNR Across NVs")
# ax1.legend(title="Durations (ns)", fontsize=9, title_fontsize=10)
# plt.show()

# # Plot Median SNR vs. SCC Duration for each amplitude
# fig2, ax2 = plt.subplots()
# for j, amplitude in enumerate(amp_vals):
#     ax2.plot(
#         duration_vals,
#         median_snr_grid[:, j],
#         label=f"{amplitude:.2f}",
#         marker="o",
#     )
# ax2.set_xlabel("SCC Duration")
# ax2.set_ylabel("Median SCC SNR")
# ax2.set_title("Median SCC SNR Across NVs")
# ax2.legend(title="Amplitude (relative)", fontsize=9, title_fontsize=10)
# plt.show()

scc_data = dm.get_raw_data(file_id=1725870710271)
scc_optimal_durations = scc_data["optimal_durations"]
# Cross pattern
scc_duration_list = list(scc_optimal_durations.values())
print(len(scc_optimal_durations))
# fmt: off
include_inds =[0, 1, 2, 3, 5, 6, 7, 8, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 28, 29, 31, 32, 33, 34, 36, 37, 39, 42, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 77, 79, 83, 84, 85, 88, 89, 90, 91, 92, 94, 95, 96, 97, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 113, 114, 116, 117, 118, 120, 122, 123, 124, 125, 128, 131, 132, 134, 136, 137, 138, 140, 141, 142, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159]
snr_list_1 = [0.16780956125453209, 0.12938292533994997, 0.11634131527079121, 0.1744119570564466, 0.22501659005268548, 0.11345394949144746, 0.04745775489253481, 0.13228462625594153, 0.14964736345939672, 0.16367330604208874, 0.15617297713811976, 0.14372887680651664, 0.05997465448684414, 0.08080214681803534, 0.04284842202775676, 0.18822104807933604, 0.21841342079128617, 0.08126129551044423, 0.11055251501760877, 0.10744167843003767, 0.1189939953659085, 0.06637280041705229, 0.104354638566516, 0.053552863029038195, 0.15087359364568811, 0.17162167069820414, 0.13089635659205293, 0.12082775192644044, 0.0721445883375322, 0.05950181385068565, 0.11404805528007525, 0.09986321981010736, 0.06309714894365114, 0.15789061377646496, 0.22194771518475426, 0.09154121656375917, 0.1376614866855914, 0.14676679146669325, 0.11408848256572983, 0.11326712773001872, 0.12929458502590227, 0.1504401919090606, 0.17834081299838717, 0.13033177232999082, 0.15852342370193204, 0.1669738854423099, 0.1118102664190604, 0.08671857266493058, 0.10104343101156449, 0.14041715456451778, 0.07449483717006793, 0.05246919068943618, 0.11632289790054852, 0.14069647410418296, 0.1534012080730808, 0.06969623315428347, 0.1652363063562784, 0.06544757851965964, 0.09792214495711156, 0.14801944821008597, 0.10002432695376746, 0.13080502174513006, 0.15836234024309606, 0.13474787628041354, 0.06774152512364567, 0.09390096816359499, 0.15828164246546597, 0.11266603425356399, 0.1361755039615031, 0.09797544951844894, 0.17678670556144013, 0.19643021156021448, 0.09439375656918007, 0.1274742134209655, 0.029651269667723225, 0.06338435228436495, 0.1471907512583116, 0.15447842318087338, 0.18107293446860076, 0.11504253258087496, 0.0532285646711273, 0.12762093203377284, 0.07434688762127317, 0.03173604171526313, 0.1488399568502073, 0.15673497487513993, 0.13884125716383575, 0.02010638935301657, 0.1810795960288653, 0.07523959792534277, 0.08695084513679097, 0.13848599127087713, 0.17455804611568937, 0.06957399332357785, 0.10432363997109931, 0.13174811362246144, 0.05685645832635608, 0.08531104660380637, 0.08436891589631722, 0.08181426539862396, 0.13687162585514737, 0.08728678412175385, 0.12722789606561713, 0.1260740519868974, 0.13868667393017978, 0.15310253525082687, 0.14449642578358238, 0.08362277874915822, 0.10302977733873052, 0.13006823696851255, 0.1758317170415289, 0.19006197942215958, 0.1235068844670473, 0.13189827150709885, 0.11261278769677194, 0.15956276284131043, 0.0795471349685714]
snr_list_2 = [0.2236559091444098, 0.2153417626545185, 0.17347896788888792, 0.21135888971421576, 0.2602679203107538, 0.09144158031207687, 0.058645229410610115, 0.17162091258839857, 0.19009721789846595, 0.13417448130955806, 0.1918759727232273, 0.14346587139870642, 0.039508111541039316, 0.10638132167871378, -0.006363707543906793, 0.2336387492736041, 0.23364137417886374, 0.06715866087503128, 0.15654865752776176, 0.1894053387961353, 0.1040317804451702, 0.15082563756643186, 0.16220608535504197, 0.06291506078675085, 0.21741653790952895, 0.1927186161539321, 0.13751681469182586, 0.17632505560263528, 0.1042321772585901, 0.16621254746214068, 0.19488541425203057, 0.14113619412935646, 0.07827267326476375, 0.1626525074890777, 0.22599202044980818, 0.13822863230861845, 0.11224591358590383, 0.17306968848734103, 0.14969504418848967, 0.1583626753421531, 0.11396630746031075, 0.17863167427510798, 0.19613014316906233, 0.11674059211187676, 0.20311676068222703, 0.16134528596958686, 0.1396308694119048, 0.15209315824021719, 0.0671585430940719, 0.1641928799211411, 0.08687037769664202, 0.11027229238107047, 0.10764459052883121, 0.1615443450032137, 0.1723677762015543, 0.10099696042207333, 0.17458339066805256, 0.14356459777580285, 0.1274032960240126, 0.1590778802782493, 0.05083794709322939, 0.14492912532053512, 0.19267559555454508, 0.15688771040931307, 0.09061273254276159, 0.17892020564246244, 0.17005122828136, 0.09862021099257691, 0.16025194595819914, 0.14343825598560278, 0.17024453660516745, 0.13319379690507027, 0.08178182247451436, 0.12877488942954637, 0.04486959943481695, 0.05077654596541186, 0.20129127268708272, 0.1553098228779138, 0.1203994185723771, 0.15725737191629907, 0.07570136957403412, 0.12294347020331697, 0.09670618388427114, 0.039892484403231204, 0.14979219751985934, 0.1664327975414499, 0.15142651720958777, 0.02081165204875867, 0.19948669225015458, 0.11942255248725969, 0.11626089063975255, 0.1805695548812397, 0.14007194857042649, 0.1438560703562685, 0.0769779294397191, 0.14138858405032537, 0.06534814969766893, 0.13031502950783183, 0.0495810693007647, 0.075036353484652, 0.15371446198967753, 0.12101905556627593, 0.1325761892875665, 0.10583241175184324, 0.14935335863131544, 0.14520328894889092, 0.1416084940802568, 0.06835033911132803, 0.05449279758538327, 0.10750079314207141, 0.18274030559833757, 0.18178786957790327, 0.12578491634691968, 0.11404922546581651, 0.11485300584295549, 0.1610868449573311, 0.09722203594579264]
#duration vs snr
# scc_durations = [168, 160, 164, 124, 188, 132, 116, 124, 160, 160, 164, 120, 140, 144, 124, 136, 136, 88, 152, 140, 140, 116, 104, 120, 112, 164, 136, 112, 96, 112, 140, 144, 196, 192, 120, 140, 228, 140, 32, 140, 148, 108, 164, 152, 132, 140, 176, 132, 136, 120, 112, 108, 144, 116, 132, 36, 192, 84, 148, 112, 132, 152, 176, 176, 176, 112, 120, 140, 168, 140, 92, 132, 92, 124, 68, 32, 92, 148, 164, 104, 32, 148, 188, 32, 112, 148, 168, 64, 140, 140, 96, 124, 176, 108, 108, 216, 216, 116, 112, 132, 148, 132, 132, 140, 160, 132, 148, 192, 160, 116, 140, 120, 152, 140, 144, 124, 160]
scc_durations = [168, 184, 220, 136, 140, 104, 104, 144, 240, 188, 160, 148, 116, 164, 124, 140, 132, 104, 304, 184, 144, 148, 116, 68, 132, 120, 112, 124, 116, 148, 212, 144, 132, 172, 116, 160, 304, 144, 60, 180, 100, 112, 172, 192, 144, 184, 292, 200, 96, 116, 156, 144, 144, 80, 160, 160, 168, 76, 176, 136, 172, 192, 264, 140, 104, 112, 140, 176, 208, 148, 116, 140, 80, 152, 140, 116, 96, 120, 112, 96, 48, 188, 48, 84, 96, 228, 172, 172, 124, 96, 128, 120, 196, 104, 88, 140, 80, 116, 112, 160, 120, 140, 112, 148, 108, 140, 152, 292, 124, 116, 140, 140, 160, 212, 140, 140, 196]
snr_list =[0.2175070074680167, 0.2200047966823075, 0.24650690091935437, 0.21162557643907692, 0.22897939127872644, 0.13758092831552324, 0.0567113557065384, 0.16575115493146028, 0.18398151072158025, 0.17989399827286068, 0.2024454433366452, 0.1585841406208637, 0.0698675549322574, 0.11975316953456738, 0.03986862017794541, 0.22609771824826888, 0.23545028458609732, 0.08093357992173393, 0.1745967697555673, 0.2220863655987486, 0.14762348476546644, 0.16427098579518848, 0.16465340808800227, 0.06749587387887214, 0.18588392271873835, 0.19052424702848159, 0.11704589204514833, 0.1951880530443538, 0.08554459684204865, 0.19118386373518556, 0.18990930262967937, 0.17162307238992555, 0.08341401960552723, 0.16776189383690188, 0.2312904897716532, 0.1658675360272612, 0.1394748853774579, 0.1895661626972061, 0.13235960477370787, 0.18460096179278426, 0.13574155761691997, 0.1763015107847138, 0.20934120416620133, 0.13875459361693313, 0.17757242829840572, 0.18626943971461377, 0.1584946065875681, 0.17902963286466936, 0.10192897736267871, 0.16788804694395063, 0.09385284830213932, 0.13901705985455523, 0.11556553627170779, 0.17592064212810446, 0.18129771328554078, 0.09222458447191074, 0.16518616361548244, 0.0791364572242049, 0.15033473750647605, 0.14321645237928127, 0.12257083412573146, 0.13055601901537095, 0.18604021809626348, 0.19338587151186087, 0.09939817128507852, 0.17568467403057722, 0.1647413834768784, 0.1978621591273887, 0.18667571809762593, 0.1558638945058165, 0.1729694283085251, 0.19232869405553762, 0.12155060376244342, 0.1920318858566745, 0.07228459545913592, 0.09500930372726012, 0.17707132091456912, 0.1371788418697394, 0.17871944411879281, 0.14104541075286842, 0.11628856846001775, 0.13728504743711806, 0.0720318251829885, 0.03597878295620328, 0.16308038805520414, 0.16368431751125687, 0.12399855535035602, 0.022309286128955746, 0.19657440337942547, 0.02206994073746961, 0.14173005023322507, 0.16555805842822008, 0.15621155712044538, 0.16686366190817295, 0.14338039550228784, 0.15306831040209654, 0.01788341157700565, 0.13229688744470164, 0.1447978565072625, 0.07748037277892783, 0.16438260715740333, 0.1674995279404956, 0.13232836809627507, 0.09864587600992891, 0.1569654798397402, 0.1373830073824862, 0.16098235230076177, 0.03693637933992055, 0.08633587251402715, 0.12739425112153824, 0.19037187943296688, 0.18133930262136966, 0.10857024861797503, 0.1286162257944382, 0.10645390416267496, 0.16926031294424715, 0.08329262430151048]
snr_list =[0.20239025621389878, 0.20467258492388218, 0.20480334018349508, 0.2349282160572997, 0.2058341151382344, 0.20498161574652493, 0.11931508403728087, 0.19073495617414607, 0.15365050552000298, 0.17155850157539926, 0.1980920125721828, 0.14882023946504203, 0.08904627470369968, 0.10948290173853463, 0.07711809099884635, 0.20480603913441503, 0.26167502655197716, 0.0645641444208683, 0.11633537142042198, 0.204170704687196, 0.1435814465740566, 0.16903883093220035, 0.19045842914752692, 0.07827960933483487, 0.19391436987388402, 0.19918067195081834, 0.20413244751377038, 0.21500554520986162, 0.07263641491464694, 0.1914126361027246, 0.16720680413108704, 0.18572252148544563, 0.08458666741188633, 0.1475740615302193, 0.24496452948299596, 0.1646964883312344, 0.10018546174916605, 0.18220848970871628, 0.10089543553994504, 0.20030981938492182, 0.2305691559835149, 0.21140465790319588, 0.1649653366707281, 0.1258167080303199, 0.20624322299820325, 0.14944198770287379, 0.11066889137289129, 0.15704912386979047, 0.08238066200957944, 0.2083905982794591, 0.11720972171091064, 0.1355081448647624, 0.08917050669378952, 0.20709959211339873, 0.17407144866260818, 0.03431856939726613, 0.16101150821947496, 0.11751440328829463, 0.09666436853285747, 0.1353609243186754, 0.08544599700765673, 0.11027300398963265, 0.10694796039496964, 0.1961002146255992, 0.06707516934819219, 0.20176299672539452, 0.15233555447770503, 0.17442861978440055, 0.14384883846958, 0.2083043265790499, 0.1680801697595147, 0.17615747475221585, 0.04929185328381762, 0.17679846476413627, 0.09886660864731776, 0.06810165064734117, 0.1969749828562882, 0.1733230165001677, 0.19912842170465564, 0.17631181196055443, 0.11574937897155173, 0.11708158524103461, 0.140274035047779, 0.0843541201551949, 0.14318707090059216, 0.13225179339351414, 0.14988371162248065, 0.03329043346862419, 0.17686360132223047, 0.06337912093772204, 0.14697509394033073, 0.17452838539058285, 0.12785760677248942, 0.1562184806404719, 0.13548311771727808, 0.18266878183954408, 0.0562531302814271, 0.158873176847576, 0.1628449758873797, 0.07379272901099433, 0.16798254424782194, 0.15714295973266545, 0.1789391796361342, 0.14688186030028785, 0.10630317945257366, 0.1547519029960303, 0.17579412563743363, 0.0772679613677331, 0.09948239152899882, 0.1415035385017376, 0.18525659950435813, 0.14113688072940422, 0.07002787939702228, 0.09882562954142936, 0.06589105766200479, 0.17116977580358092, 0.06496865075117635]
snr_list = [0.211, 0.203, 0.168, 0.214, 0.236, 0.207, 0.098, 0.176, 0.164, 0.184, 0.222, 0.127, 0.074, 0.104, 0.079, 0.194, 0.221, 0.103, 0.132, 0.194, 0.189, 0.155, 0.193, 0.095, 0.105, 0.163, 0.181, 0.197, 0.142, 0.186, 0.139, 0.181, 0.103, 0.16, 0.195, 0.157, 0.144, 0.192, 0.054, 0.18, 0.153, 0.154, 0.176, 0.126, 0.155, 0.102, 0.161, 0.183, 0.115, 0.203, 0.139, 0.111, 0.138, 0.19, 0.177, 0.079, 0.175, 0.151, 0.114, 0.125, 0.146, 0.104, 0.086, 0.198, 0.126, 0.165, 0.114, 0.157, 0.185, 0.172, 0.106, 0.17, 0.093, 0.182, 0.126, 0.055, 0.139, 0.096, 0.197, 0.149, 0.119, 0.099, 0.114, 0.135, 0.154, 0.126, 0.141, 0.045, 0.155, 0.064, 0.161, 0.151, 0.136, 0.167, 0.13, 0.183, 0.085, 0.18, 0.144, 0.134, 0.097, 0.133, 0.143, 0.134, 0.132, 0.121, 0.162, 0.063, 0.157, 0.141, 0.168, 0.151, 0.072, 0.091, 0.108, 0.162, 0.059]
print(np.median(snr_list))
print(min(snr_list))
#106NVs
# snr_list_1 = [0.23129775625601648, 0.23417599525602442, 0.1779517477956032, 0.22524765912276878, 0.24770175736711153, 0.212812891499496, 0.07013642995774595, 0.20124243453606724, 0.15996931794803373, 0.1896448342400951, 0.2094570257198266, 0.16822803127968813, 0.07117436286610636, 0.10014366161108905, 0.0889852125801993, 0.24231463599443467, 0.24043260759814786, 0.03876388174141727, 0.12464363985303892, 0.16118230545407455, 0.17997584716078643, 0.19265919413023325, 0.06847796544308415, 0.0741062983246794, 0.200816529915426, 0.20463733901142614, 0.20792102121503842, 0.09365674930095091, 0.15986656696493556, 0.1407288389460677, 0.15006248786066093, 0.06356235492787746, 0.11576615884734337, 0.20843667968711216, 0.11972518035049022, 0.057748239022766816, 0.13002607984279269, 0.05516609138851635, 0.021509405843158712, 0.18907172413329834, 0.1893427890792867, 0.11734884446176215, 0.10729868176829999, 0.19722293376321348, 0.11765434436761933, 0.09874098585333338, 0.1289797405847639, 0.08074920809704099, 0.23038584111417715, 0.09515874207997278, 0.1616382765403953, 0.12215088392820893, 0.21035651298672575, 0.07191539629186687, 0.16111699137874644, 0.07292232951015912, 0.10218675038022235, 0.07764616820062917, 0.11426407308714273, 0.06461138497062047, 0.08945406575043671, 0.19451181910288243, 0.11992003556067843, 0.15800434140240607, 0.10046296091663692, 0.06512002608371344, 0.21033847173109177, 0.17133227389197306, 0.17875735215208663, 0.17916936750937446, 0.11800918016545181, 0.05104018924435708, 0.17355271786347626, 0.20794407501096562, 0.18824972216114955, 0.1929404761653039, 0.07782790738432509, 0.06911774809876083, 0.0934580495059354, 0.10462763281015247, 0.07886815037114206, 0.10798629710879973, 0.02081974702670303, 0.18290665370362993, 0.16952351558521783, 0.12509511289711217, 0.15528049113551595, 0.14522848407310068, 0.1681897690097774, 0.14961655665744428, 0.16607176071612545, 0.15991529005743274, 0.12570598869148444, 0.12832668644359826, 0.16631225442045686, 0.17220763009167656, 0.1247345138816662, 0.1468864012544012, 0.15528233955841578, 0.0717226835050559, 0.09353296440393569, 0.15002430642701559, 0.19349212164878163, 0.19018304977746145, 0.06576037434710687, 0.16810336937980258]
snr_list_2 = [0.24791876132092655, 0.22470452704198204, 0.22270816019054757, 0.258060305758224, 0.24190141118822614, 0.19882234694962764, 0.06850607788194359, 0.20680544952376254, 0.1758814393420454, 0.19004339373452847, 0.2260277373383441, 0.16845754454488435, 0.07351363962334835, 0.10060488333843512, 0.09460585623082067, 0.2154190974120424, 0.23207207854623657, 0.02746108359369265, 0.15645560458253072, 0.14709330840785462, 0.18863949921947815, 0.2029984369632432, 0.05878052217753638, 0.07377735217030468, 0.1922016795923323, 0.20356810493051, 0.18490853902689716, 0.09066967880205294, 0.15945036016263342, 0.1167224264230229, 0.1759577686061651, 0.0721277503195778, 0.11901351057584367, 0.22762807044983843, 0.1071004807287519, 0.023761090639405742, 0.13722123285109522, 0.05380143424057404, 0.009521920693045893, 0.20144008220031898, 0.19823123768194148, 0.1090961199908577, 0.10335777573173356, 0.18720113072542455, 0.11426656187525953, 0.06740910245210543, 0.14656567110943966, 0.0736051918910859, 0.20528488320622953, 0.08550457297263828, 0.15796745819632071, 0.10624545496384176, 0.19133690556296995, 0.05122258122777087, 0.15362442490661132, 0.07498910800465149, 0.10983984113966073, 0.05278574687803758, 0.12588822897225316, 0.08477572901405762, 0.053517073775179606, 0.1771462584835669, 0.11960834710692057, 0.1535761941994255, 0.08565635838899643, 0.053781699175928156, 0.19438413393662304, 0.1544099838651192, 0.13549420526820113, 0.1862510510756221, 0.10438267441423839, 0.07877421829853931, 0.17576920804541127, 0.19861339814307075, 0.17611518841276116, 0.19075697143022155, 0.08974216988391959, 0.027158440208792975, 0.095275459261175, 0.14036622237683224, 0.06625625923278528, 0.10443056565631906, 0.0329795101826761, 0.18022796588509812, 0.13966801775872725, 0.1372285126111869, 0.136525366716626, 0.13602483525979736, 0.18064201816265052, 0.13572711107853452, 0.18346648029089507, 0.17488952002982097, 0.12367388590834835, 0.12701219281589987, 0.12674937897479402, 0.18140506423372663, 0.11842112619174733, 0.1534832014296057, 0.12495346173917479, 0.0709509238175776, 0.07362856636227134, 0.16761044917604906, 0.18819987620852838, 0.1973468584109875, 0.0683752076223563, 0.17516542057856682]
scc_duration_list = [168, 184, 220, 136, 140, 104, 104, 144, 240, 188, 160, 148, 116, 164, 124, 140, 132, 104, 304, 184, 144, 148, 116, 68, 132, 120, 112, 124, 116, 148, 212, 144, 132, 172, 116, 160, 304, 144, 60, 180, 100, 112, 172, 192, 144, 184, 292, 200, 96, 116, 156, 144, 144, 80, 160, 160, 168, 76, 176, 136, 172, 192, 264, 140, 104, 112, 140, 176, 208, 148, 116, 140, 80, 152, 140, 116, 96, 120, 112, 96, 48, 188, 48, 84, 96, 228, 172, 172, 124, 96, 128, 120, 196, 104, 88, 140, 80, 116, 112, 160, 120, 140, 112, 148, 108, 140, 152, 292, 124, 116, 140, 140, 160, 212, 140, 140, 196]
drop_indices = [17, 55, 64, 72, 87, 89, 96, 99, 112, 114, 116]
scc_durations = [val for idx, val in enumerate(scc_duration_list) if idx not in drop_indices]
# print(len(scc_durations))
# print(len(snr_list))

# snr_list =[0.208, 0.202, 0.186, 0.198, 0.246, 0.211, 0.062, 0.178, 0.161, 0.192, 0.246, 0.139, 0.084, 0.105, 0.089, 0.198, 0.242, 0.068, 0.134, 0.214, 0.185, 0.149, 0.172, 0.122, 0.128, 0.205, 0.202, 0.174, 0.192, 0.172, 0.145, 0.169, 0.135, 0.184, 0.204, 0.174, 0.13, 0.174, 0.06, 0.178, 0.237, 0.167, 0.198, 0.147, 0.176, 0.154, 0.118, 0.157, 0.113, 0.202, 0.084, 0.117, 0.117, 0.182, 0.157, 0.121, 0.181, 0.124, 0.135, 0.121, 0.15, 0.099, 0.107, 0.198, 0.09, 0.153, 0.159, 0.153, 0.177, 0.182, 0.139, 0.202, 0.141, 0.173, 0.114, 0.057, 0.193, 0.172, 0.191, 0.165, 0.076, 0.116, 0.072, 0.105, 0.152, 0.139, 0.186, 0.049, 0.197, 0.072, 0.072, 0.158, 0.175, 0.142, 0.132, 0.173, 0.063, 0.172, 0.141, 0.147, 0.138, 0.151, 0.169, 0.147, 0.148, 0.117, 0.149, 0.07, 0.135, 0.152, 0.163, 0.189, 0.116, 0.124, 0.129, 0.158, 0.079]
# print(len(snr_list))
# scc_durations =  [112, 100, 92, 84, 144, 100, 100, 80, 108, 116, 92, 96, 108, 100, 88, 112, 108, 76, 76, 100, 132, 84, 92, 68, 76, 116, 124, 80, 100, 84, 76, 108, 128, 192, 92, 84, 92, 84, 108, 96, 132, 104, 112, 92, 100, 84, 92, 72, 84, 100, 116, 72, 124, 96, 84, 72, 164, 100, 56, 76, 64, 116, 92, 144, 172, 96, 60, 84, 100, 116, 80, 112, 88, 80, 64, 116, 100, 120, 112, 112, 128, 96, 108, 100, 108, 84, 144, 84, 128, 92, 108, 116, 148, 120, 88, 168, 64, 124, 104, 116, 100, 124, 112, 124, 120, 100, 172, 116, 124, 84, 92, 116, 80, 96, 88, 80, 92]
# print(len(snr_list))


# amp vs duration
# snr_list = [0.22513446034243317, 0.21831942427150663, 0.1864456148972971, 0.23004406032969807, 0.20361999308476258, 0.1611210330601154, 0.09841479003903128, 0.20706145200646411, 0.1399834263829547, 0.1800769226542798, 0.23145733800222637, 0.15539923920050894, 0.07476779494764035, 0.1180393665029644, 0.07453750588309137, 0.23046861782528308, 0.22676585278052047, 0.11145317703283024, 0.11550554140365753, 0.1912892960587148, 0.14895573906078308, 0.13492503488096905, 0.18367419115380682, 0.0, 0.1636645121060629, 0.1727494018153561, 0.16642869361434642, 0.19393097718669025, 0.10183061763748887, 0.19782294582101032, 0.1482606637250713, 0.16734769182559894, 0.07257661198466295, 0.17258421552795147, 0.24161235171249218, 0.148665466998369, 0.062066346879995925, 0.1905685801223628, 0.10847647674446848, 0.2017439159656008, 0.11172472477165395, 0.21692028571668015, 0.18799630734175865, 0.09836944978304497, 0.21308527041864006, 0.13913754151952973, 0.12607945899344264, 0.1471780235394125, 0.07692526262081911, 0.21763078582789125, 0.12779702568043913, 0.12984385678925692, 0.12163666447487632, 0.1575409179408849, 0.16801419073488086, 0.06939603220706601, 0.16784326245286113, 0.09089825402599329, 0.11622702817713927, 0.14399808108189358, 0.09055605952372243, 0.11429101547375027, 0.09980600151208574, 0.18377034683903126, 0.09705333297763125, 0.18858286169751512, 0.15311498599995502, 0.1761665534606873, 0.16011699290139864, 0.19573056566123084, 0.14809530202671697, 0.17299573500187554, 0.0866188908773919, 0.15195145899926923, 0.12286174817740027, 0.08976282890069755, 0.12931048828142827, 0.1826343210633723, 0.2007315211300067, 0.15439861942423364, 0.06174725655893107, 0.12112455960251063, 0.06700092493972755, 0.0973040157783852, 0.16069599154101658, 0.1068701748324066, 0.14809753214071744, 0.08029992691316905, 0.2263866770696713, 0.0553467216050191, 0.16197226308453663, 0.14858964719582507, 0.16194642222035607, 0.16591040010535688, 0.13222946481173575, 0.15776146780946929, 0.04429072403470588, 0.17412130166740966, 0.16549403707152113, 0.0884356766268292, 0.1613099234557099, 0.1394349739664387, 0.1514425908820485, 0.12217040709486508, 0.0, 0.152806188928434, 0.1508434712140184, 0.09160028398985277, 0.11187557942786518, 0.1489855065452008, 0.1656551274711259, 0.17586906452165402, 0.07644178484269164, 0.09018292502691247, 0.09042191721871647, 0.15012183712281385, 0.07909609261505032]
# amp_list = [1.0662662662662663, 1.2, 1.2, 1.2, 0.8540540540540541, 0.9825825825825826, 0.8, 1.009009009009009, 1.2, 1.1875875875875876, 1.2, 1.2, 0.8, 1.2, 1.0982982982982983, 1.0034034034034034, 1.2, 1.2, 1.2, 0.9837837837837837, 0.9793793793793794, 1.2, 1.0286286286286286, 0.8, 0.8836836836836837, 1.2, 0.8, 1.067867867867868, 1.2, 1.2, 1.2, 0.950950950950951, 0.8740740740740741, 1.053053053053053, 0.8, 1.0998998998999, 1.2, 1.1327327327327328, 0.8836836836836837, 1.2, 0.8, 1.2, 1.077877877877878, 1.0342342342342343, 1.2, 1.027827827827828, 1.2, 1.157157157157157, 0.988988988988989, 0.9101101101101101, 1.0622622622622622, 1.2, 0.9121121121121121, 0.8, 1.2, 1.2, 1.009009009009009, 0.9373373373373374, 1.2, 1.2, 1.0102102102102102, 1.2, 0.9977977977977978, 0.9721721721721721, 0.8, 1.2, 1.2, 1.0314314314314315, 1.0434434434434434, 1.0774774774774776, 1.2, 1.1511511511511512, 1.0782782782782783, 1.0182182182182182, 0.9165165165165166, 0.8, 0.8, 0.918918918918919, 0.8, 0.8, 1.0682682682682683, 0.972972972972973, 1.2, 0.8228228228228228, 0.8, 1.2, 1.2, 1.063063063063063, 0.9109109109109109, 0.9621621621621621, 0.9557557557557558, 0.9177177177177177, 1.2, 0.9241241241241241, 0.9445445445445446, 0.8, 1.2, 0.9017017017017017, 0.9637637637637637, 1.2, 0.8, 0.8668668668668669, 0.8, 0.9109109109109109, 0.8, 0.9677677677677677, 1.003003003003003, 1.0622622622622622, 0.9317317317317317, 1.2, 1.0818818818818818, 1.2, 1.0482482482482482, 1.019019019019019, 1.2, 1.0486486486486486, 1.2]
# fmt: on
# scc_duration = [scc_optimal_durations[val] for val in include_inds]
# print(np.median(snr_list_2))
# scc_durations = [scc_duration_list[idx] for idx in include_inds]
# Plotting histograms
# plt.figure(figsize=(8, 6))
# plt.hist(snr_list_1, bins=10, alpha=0.6, label="after red calibration", density=True)
# plt.hist(snr_list_2, bins=10, alpha=0.6, label="before red calibration", density=True)

plt.figure(figsize=(6, 5))
plt.scatter(
    scc_durations,
    snr_list,
    alpha=0.7,  # Transparency for better visibility
    edgecolors="black",  # Add black edges to points for clarity
)

# Add labels, title, and grid
plt.xlabel("SCC Duration", fontsize=12)
plt.ylabel("SNR", fontsize=12)
plt.title("SCC Duration vs. SNR", fontsize=14)
plt.grid(alpha=0.3)
plt.show()
# plt.scatter(
#     scc_duration_list,
#     snr_list_2,
# )
# # Add labels and legend
# plt.xlabel("SNR", fontsize=12)
# plt.ylabel("Density", fontsize=12)
# plt.title("Comparison of SNR Distributions", fontsize=14)
# plt.legend(fontsize=12)
# plt.grid(alpha=0.3)

# # Show the plot
# plt.show()


def plot_scc_amp_duration(file_id):
    # fmt: off
    snr_list = [0.207, 0.206, 0.211, 0.183, 0.08, 0.224, 0.095, 0.078, 0.136, 0.038, 0.034, 0.026, 0.039, 0.165, 0.13, 0.18, 0.153, 0.074, 0.08, 0.028, 0.053, 0.142, 0.188, 0.077, 0.121, 0.137, 0.085, 0.067, 0.157, 0.135, 0.036, 0.075, 0.135, 0.168, 0.045, 0.067, 0.158, 0.12, 0.074, 0.167, 0.073, 0.046, 0.149, 0.054, 0.135, 0.064, 0.119, 0.193, 0.104, 0.091, 0.04, 0.127, 0.125, 0.105, 0.054, 0.069, 0.139, 0.151, 0.119, 0.068, 0.134, 0.054, 0.11, 0.096, 0.105, 0.133, 0.149, 0.057, 0.102, 0.083, 0.097, 0.175, 0.096, 0.058, 0.161, 0.158, 0.048, 0.1, 0.093, 0.132, 0.131, 0.055, 0.028, 0.083, 0.05, 0.061, 0.06, 0.082, 0.114, 0.065, 0.144, 0.142, 0.116, 0.095, 0.143, 0.121, 0.116, 0.102, 0.032, 0.061, 0.113, 0.087, 0.061, 0.119, 0.027, 0.119, 0.131, 0.144, 0.122, 0.087, 0.087, 0.067, 0.089, 0.068, 0.089, 0.043, 0.131, 0.05, 0.075, 0.039, 0.09, 0.085, 0.099, 0.123, 0.133, 0.097, 0.083, 0.04, 0.097, 0.032, 0.043, 0.148, 0.092, 0.037, 0.118, 0.051, 0.078, 0.053, 0.081, 0.056, 0.112, 0.119, 0.05, 0.044, 0.131, 0.137, 0.133, 0.074, 0.049, 0.06, 0.043, 0.063, 0.106, 0.165, 0.16, 0.05, 0.132, 0.088, 0.081, 0.062]
    # scc_duration_list = [304, 304, 304, 156, 304, 148, 244, 100, 304, 60, 304, 76, 88, 304, 112, 304, 144, 304, 304, 48, 76, 140, 144, 88, 304, 304, 304, 112, 304, 172, 304, 96, 72, 168, 128, 48, 304, 112, 124, 304, 48, 304, 304, 48, 304, 304, 168, 144, 304, 304, 60, 304, 108, 304, 48, 304, 164, 160, 304, 268, 240, 196, 304, 112, 304, 48, 264, 304, 152, 304, 184, 148, 304, 52, 160, 112, 104, 304, 88, 116, 56, 304, 68, 304, 304, 112, 52, 304, 304, 96, 304, 120, 304, 140, 304, 304, 156, 48, 304, 64, 304, 304, 132, 124, 304, 148, 304, 148, 80, 136, 124, 148, 108, 132, 132, 68, 124, 132, 304, 92, 80, 64, 304, 152, 136, 304, 48, 96, 304, 48, 64, 304, 64, 304, 216, 304, 304, 144, 176, 140, 304, 136, 104, 304, 56, 136, 76, 112, 304, 120, 164, 304, 88, 104, 128, 152, 132, 112, 100, 304]
    # scc_amp_list = [1.107, 1.071, 1.214, 1.179, 1.036, 1.179, 0.75, 1.214, 0.857, 0.857, 1.036, 0.821, 0.857, 1.25, 1.036, 1.179, 1.25, 0.786, 1.179, 1.036, 1.25, 1.0, 1.071, 1.25, 1.25, 0.857, 1.036, 1.071, 1.036, 1.143, 1.036, 0.75, 1.214, 0.964, 1.036, 0.75, 0.786, 0.964, 1.107, 0.857, 1.179, 0.857, 1.214, 1.143, 1.071, 1.25, 1.143, 0.857, 1.214, 1.143, 0.786, 0.929, 0.75, 1.071, 0.857, 0.75, 1.036, 1.071, 0.786, 1.107, 1.071, 1.214, 0.964, 0.929, 1.107, 1.143, 1.214, 1.071, 1.036, 1.214, 0.893, 1.071, 0.75, 0.786, 1.25, 1.107, 0.929, 0.786, 0.929, 1.25, 1.107, 1.036, 1.0, 0.893, 1.0, 0.964, 1.107, 1.143, 1.25, 1.214, 0.821, 0.929, 1.107, 1.107, 1.25, 1.214, 0.75, 1.214, 1.0, 1.25, 0.964, 0.857, 0.929, 1.25, 0.893, 1.0, 0.75, 1.179, 1.25, 1.214, 1.036, 0.821, 1.214, 1.0, 1.179, 1.214, 1.107, 1.25, 0.929, 1.036, 1.143, 0.821, 0.893, 1.179, 1.143, 0.893, 1.25, 1.071, 0.786, 1.25, 1.107, 1.179, 0.929, 1.0, 1.25, 0.964, 1.036, 1.036, 1.25, 1.179, 1.143, 1.143, 1.143, 1.179, 1.179, 1.143, 1.214, 1.107, 0.893, 1.25, 1.143, 0.964, 1.25, 1.036, 0.857, 1.107, 1.179, 1.0, 1.214, 0.786]
    # fmt: on
    scc_data = dm.get_raw_data(file_id=1725870710271)
    scc_optimal_durations = scc_data["optimal_durations"]
    scc_optimal_amplitudes = scc_data["optimal_amplitudes"]
    scc_duration_list = list(scc_optimal_durations.values())
    scc_amp_list = list(scc_optimal_amplitudes.values())
    snr_list = np.array(snr_list)
    exclude_list = np.argwhere(snr_list >= 0.07).flatten()
    optimal_durations = [scc_duration_list[i] for i in exclude_list]
    optimal_amplitudes = [scc_amp_list[i] for i in exclude_list]
    optimal_snrs = [snr_list[i] for i in exclude_list]
    num_snrs = len(optimal_snrs)
    fig = plt.figure(figsize=(6.5, 5))
    plt.scatter(
        optimal_durations,
        optimal_amplitudes,
        c=optimal_snrs,
        cmap="viridis",
        s=40,
        edgecolors="black",
    )

    # for i, (x, y) in enumerate(zip(optimal_durations, optimal_amplitudes)):
    #     optimal_snr = optimal_snrs[i]
    #     plt.annotate(f"{optimal_snr:.2f}", (x, y), fontsize=6, alpha=0.6, color="red")

    colorbar = plt.colorbar(label="Reduced Chi-Squared")
    colorbar.ax.tick_params(labelsize=12)
    colorbar.set_label("SNR", fontsize=12)
    plt.xlabel("Optimal Duration (ns)", fontsize=12)
    plt.ylabel("Optimal Amplitude", fontsize=12)
    plt.title(f"Optimal SCC Parameters Across NVs ({num_snrs}NVs)", fontsize=14)
    plt.grid(alpha=0.3)
    plt.xticks(fontsize=12)
    plt.yticks(fontsize=12)
    plt.show()
    # file_name = dm.get_file_name(file_id)
    # file_path = dm.get_file_path(__file__, file_name, f"{file_id}_amp_vs_duration")
    # dm.save_figure(fig, file_path)


if __name__ == "__main__":
    kpl.init_kplotlib()
    file_id = 1728131481474

    # data = dm.get_raw_data(file_id=file_id)
    # process_and_plot(data)
    # # processed data analysis
    # processed_data_id = 1723819842491
    # processed_data_id = 1728147590280
    # processed_data_id = 1729123064963
    # processed_data = dm.get_raw_data(file_id=processed_data_id)
    # analyze_and_visualize(processed_data)
    # plot_scc_amp_duration(file_id)
    # file_name = dm.get_file_name(file_id)
    # print(dm.get_file_name(1728131481474))
    plt.show(block=True)
